const detailsVacio = [
  ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `, ` `
]
// CORTE 1
const enunciadosP1 = [
  "Ejercicio 1 del parcial con el metodo Burbuja <br>Tiempo de ejecucion: 3 milisegundos <br> Memoria consumida: 882800 bytes <br> Cantidad de iteraciones: 12468",
  "Ejercicio 1 del parcial con el metodo Burbuja mejorado <br>Tiempo de ejecucion: 15 milisegundos <br> Memoria consumida: 986232 bytes <br> Cantidad de iteraciones: 12468",
  "Ejercicio 1 del parcial con el metodo quick sort <br>Tiempo de ejecucion: 496613 nanosegundos <br> Memoria consumida: 678016 bytes <br> Cantidad de iteraciones: 6144<br><br>Como podemos observar al comparar los resultados del quicksort despues de su ejecucion con los metodos burbuja, a este metodo no le toma ni un segundo realizar la misma tarea, le toma menos de la mitad de las iteraciones y cosume alrededor de un 30% menos de memoria en su ejecucion, por lo que en este caso, quicksort es la mejor opcion para organizar los datos",
  
  "Ejercicio 2 del parcial con el metodo Burbuja <br>Tiempo de ejecucion: 1462624 nanosegundos  <br> Memoria consumida: 837736 bytes <br> Cantidad de iteraciones: 4950",
  "Ejercicio 2 del parcial con el metodo Burbuja mejorado <br>Tiempo de ejecucion: 1628513 nanosegundos <br> Memoria consumida: 859048 bytes <br> Cantidad de iteraciones: 4940",
  "Ejercicio 2 del parcial con el metodo quick sort <br>Tiempo de ejecucion: 407472  nanosegundos <br> Memoria consumida: 862048 bytes <br> Cantidad de iteraciones: 645 <br>Como se puede observar al correr tres metodos y comparar sus resultados, quick sort demuestra ser mas rapido utilizando menos iteraciones pero con un gasto de recursos aunque casi imperceptible, mayor",
  
  "Ejercicio 3 del parcial con el metodo burbuja <br>Tiempo de ejecucion: 1272393 nanosegundos  <br> Memoria consumida: 837336 bytes <br> Cantidad de iteraciones: 4371",
  "Ejercicio 3 del parcial con el metodo burbuja mejorado<br>Tiempo de ejecucion: 1251293 nanosegundos  <br> Memoria consumida: 860160 bytes <br> Cantidad de iteraciones: 4361",
  "Ejercicio 3 del parcial con el quickSort <br>Tiempo de ejecucion: 489542 nanosegundos  <br> Memoria consumida: 860536 bytes <br> Cantidad de iteraciones: 533",
  
  "Ejercicio 3 del parcial con el metodo burbuja en numeros<br>Tiempo de ejecucion: 175230 nanosegundos  <br> Memoria consumida: 843592 bytes <br> Cantidad de iteraciones: 5151",
  "Ejercicio 3 del parcial con el metodo burbuja mejorado en numeros<br>Tiempo de ejecucion: 178334 nanosegundos  <br> Memoria consumida: 843632 bytes <br> Cantidad de iteraciones: 5060",
  "Ejercicio 3 del parcial con el quickSort en numeros<br>Tiempo de ejecucion: 63179 nanosegundos  <br> Memoria consumida: 838008 bytes <br> Cantidad de iteraciones: 871<br> Como podemos observar, tanto en el caso de los numeros, como el caso de las letras, el metodo mas optimo a utilizar es quick sort",

  "Ejercicio 4 del parcial con el metodo burbuja <br>Tiempo de ejecucion: 1282151 nanosegundos  <br> Memoria consumida: 837136 bytes <br> Cantidad de iteraciones: 3403",
  "Ejercicio 4 del parcial con el metodo burbuja mejorado<br>Tiempo de ejecucion: 1183729 nanosegundos  <br> Memoria consumida: 859520 bytes <br> Cantidad de iteraciones: 3403",
  "Ejercicio 4 del parcial con el quickSort <br>Tiempo de ejecucion: 1105509 nanosegundos  <br> Memoria consumida: 859576 bytes <br> Cantidad de iteraciones: 2155",
  
  "Ejercicio 4 del parcial con el metodo burbuja en numeros<br>Tiempo de ejecucion: 215682 nanosegundos  <br> Memoria consumida: 841864 bytes <br> Cantidad de iteraciones: 5151",
  "Ejercicio 4 del parcial con el metodo burbuja mejorado en numeros<br>Tiempo de ejecucion: 258404 nanosegundos  <br> Memoria consumida: 843392 bytes <br> Cantidad de iteraciones: 5151",
  "Ejercicio 4 del parcial con el quickSort en numeros<br>Tiempo de ejecucion: 170232 nanosegundos  <br> Memoria consumida: 837776 bytes <br> Cantidad de iteraciones: 5151<br> Como podemos observar, tanto en el caso de los numeros, como el caso de las letras, ambas ordenadas al revez, los 3 metodos consumen lo casi lo mismo en todo, iteraciones, tiempo y memoria, por lo que se tendria que buscar otro metodo optimo para este tipo de casos",

  "Ejercicio 5 del parcial con el metodo burbuja <br>Tiempo de ejecucion: 3597906 nanosegundos  <br> Memoria consumida: 857848 bytes <br> Cantidad de iteraciones: 18336",
  "Ejercicio 5 del parcial con el metodo burbuja mejorado<br>Tiempo de ejecucion: 3540006 nanosegundos  <br> Memoria consumida: 837424 bytes <br> Cantidad de iteraciones: 18258",
  "Ejercicio 5 del parcial con el quickSort <br>Tiempo de ejecucion: 855553 nanosegundos  <br> Memoria consumida: 861672 bytes <br> Cantidad de iteraciones: 1768",
  
  "Ejercicio 5 del parcial con el metodo burbuja en numeros<br>Tiempo de ejecucion: 717605 nanosegundos  <br> Memoria consumida: 839320 bytes <br> Cantidad de iteraciones: 20706",
  "Ejercicio 5 del parcial con el metodo burbuja mejorado en numeros<br>Tiempo de ejecucion: 854943 nanosegundos  <br> Memoria consumida: 839280 bytes <br> Cantidad de iteraciones: 20553",
  "Ejercicio 5 del parcial con el quickSort en numeros<br>Tiempo de ejecucion: 114604 nanosegundos  <br> Memoria consumida: 857584 bytes <br> Cantidad de iteraciones: 1984<br> Como podemos observar, tanto en el caso de los numeros, como el caso de las letras, con valores repetidos, quick sort nuevamente se establece como la mejor opcion para este ejercicio de ordenamiento",

  "Ejercicio 6 del parcial con el metodo burbuja<br>Tiempo de ejecucion: 5 milisegundos  <br> Memoria consumida: 820232 bytes <br> Cantidad de comparaciones: 499500",
  "Ejercicio 6 del parcial con el metodo burbuja mejorado<br>Tiempo de ejecucion: 6 milisegundos  <br> Memoria consumida: 841184 bytes <br> Cantidad de comparaciones: 497670",
  "Ejercicio 6 del parcial con el metodo quick sort<br>Tiempo de ejecucion: 1 milisegundos  <br> Memoria consumida: 882304 bytes <br> Cantidad de comparaciones: 14292 <br>En cuanto a cuál es la mejor opción, depende de varios factores, incluida la cantidad de elementos en el arreglo, la distribución de los datos y la implementación específica de los algoritmos. Sin embargo, en general, Quick Sort tiende a ser más eficiente en términos de tiempo de ejecución, especialmente para conjuntos de datos más grandes, debido a su complejidad de tiempo, Sin embargo, para conjuntos de datos más pequeños o específicos, los algoritmos de Burbuja (especialmente el mejorado) pueden ser competitivos.",
  "Este programa genera un arreglo de nombres aleatorios y luego cuenta las repeticiones de cada nombre en el arreglo. Luego, ordena el arreglo alfabéticamente y por la cantidad de repeticiones, presentando dos listas ordenadas: una lista muestra los nombres ordenados alfabéticamente junto con su frecuencia de aparición, y la otra lista muestra los nombres ordenados por la cantidad de repeticiones, mostrando los nombres más comunes primero."
]
const codigoP1 = [
`public class Main {
  public static void main(String[] args) {
      // Arrays de fechas y precios
      String[] dates = {
  "01/01/2022", "02/01/2022", "03/01/2022", "04/01/2022", "05/01/2022", "06/01/2022",
  "07/01/2022", "08/01/2022", "09/01/2022", "10/01/2022", "11/01/2022", "12/01/2022",
  "13/01/2022", "14/01/2022", "15/01/2022", "16/01/2022", "17/01/2022", "18/01/2022",
  "19/01/2022", "20/01/2022", "21/01/2022", "22/01/2022", "23/01/2022", "24/01/2022",
  "25/01/2022", "26/01/2022", "27/01/2022", "28/01/2022", "29/01/2022", "30/01/2022",
  "31/01/2022", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022",
  "06/02/2022", "07/02/2022", "08/02/2022", "09/02/2022", "10/02/2022", "11/02/2022",
  "12/02/2022", "13/02/2022", "14/02/2022", "15/02/2022", "16/02/2022", "17/02/2022",
  "18/02/2022", "19/02/2022", "20/02/2022", "21/02/2022", "22/02/2022", "23/02/2022",
  "24/02/2022", "25/02/2022", "26/02/2022", "27/02/2022", "28/02/2022", "01/03/2022",
  "02/03/2022", "03/03/2022", "04/03/2022", "05/03/2022", "06/03/2022", "07/03/2022",
  "08/03/2022", "09/03/2022", "10/03/2022", "11/03/2022", "12/03/2022", "13/03/2022",
  "14/03/2022", "15/03/2022", "16/03/2022", "17/03/2022", "18/03/2022", "19/03/2022",
  "20/03/2022", "21/03/2022", "22/03/2022", "23/03/2022", "24/03/2022", "25/03/2022",
  "26/03/2022", "27/03/2022", "28/03/2022", "29/03/2022", "30/03/2022", "31/03/2022",
  "01/04/2022", "02/04/2022", "03/04/2022", "04/04/2022", "05/04/2022", "06/04/2022",
  "07/04/2022", "08/04/2022", "09/04/2022", "10/04/2022", "11/04/2022", "12/04/2022",
  "13/04/2022", "14/04/2022", "15/04/2022", "16/04/2022", "17/04/2022", "18/04/2022",
  "19/04/2022", "20/04/2022", "21/04/2022", "22/04/2022", "23/04/2022", "24/04/2022",
  "25/04/2022", "26/04/2022", "27/04/2022", "28/04/2022", "29/04/2022", "30/04/2022",
  "01/05/2022", "02/05/2022", "03/05/2022", "04/05/2022", "05/05/2022", "06/05/2022",
  "07/05/2022", "08/05/2022", "09/05/2022", "10/05/2022", "11/05/2022", "12/05/2022",
  "13/05/2022", "14/05/2022", "15/05/2022", "16/05/2022", "17/05/2022", "18/05/2022",
  "19/05/2022", "20/05/2022", "21/05/2022", "22/05/2022", "23/05/2022", "24/05/2022",
  "25/05/2022", "26/05/2022", "27/05/2022", "28/05/2022", "29/05/2022", "30/05/2022",
  "31/05/2022", "01/06/2022", "02/06/2022", "03/06/2022", "04/06/2022", "05/06/2022",
  "06/06/2022", "07/06/2022", "08/06/2022", "09/06/2022", "10/06/2022", "11/06/2022",
  "12/06/2022", "13/06/2022", "14/06/2022", "15/06/2022", "16/06/2022", "17/06/2022",
  "18/06/2022", "19/06/2022", "20/06/2022", "21/06/2022", "22/06/2022", "23/06/2022",
  "24/06/2022", "25/06/2022", "26/06/2022", "27/06/2022", "28/06/2022", "29/06/2022",
  "30/06/2022", "01/07/2022", "02/07/2022", "03/07/2022", "04/07/2022", "05/07/2022",
  "06/07/2022", "07/07/2022", "08/07/2022", "09/07/2022", "10/07/2022", "11/07/2022",
  "12/07/2022", "13/07/2022", "14/07/2022", "15/07/2022", "16/07/2022", "17/07/2022",
  "18/07/2022", "19/07/2022", "20/07/2022", "21/07/2022", "22/07/2022", "23/07/2022",
  "24/07/2022", "25/07/2022", "26/07/2022", "27/07/2022", "28/07/2022", "29/07/2022",
  "30/07/2022", "31/07/2022", "01/08/2022", "02/08/2022", "03/08/2022", "04/08/2022",
  "05/08/2022", "06/08/2022", "07/08/2022", "08/08/2022", "09/08/2022", "10/08/2022",
  "11/08/2022", "12/08/2022", "13/08/2022", "14/08/2022", "15/08/2022", "16/08/2022",
  "17/08/2022", "18/08/2022", "19/08/2022", "20/08/2022", "21/08/2022", "22/08/2022",
  "23/08/2022", "24/08/2022", "25/08/2022", "26/08/2022", "27/08/2022", "28/08/2022",
  "29/08/2022", "30/08/2022", "31/08/2022", "01/09/2022", "02/09/2022", "03/09/2022",
  "04/09/2022", "05/09/2022", "06/09/2022", "07/09/2022", "08/09/2022", "09/09/2022",
  "10/09/2022", "11/09/2022", "12/09/2022", "13/09/2022", "14/09/2022", "15/09/2022",
  "16/09/2022", "17/09/2022", "18/09/2022", "19/09/2022", "20/09/2022", "21/09/2022",
  "22/09/2022", "23/09/2022", "24/09/2022", "25/09/2022", "26/09/2022", "27/09/2022",
  "28/09/2022", "29/09/2022", "30/09/2022", "01/10/2022", "02/10/2022", "03/10/2022",
  "04/10/2022", "05/10/2022", "06/10/2022", "07/10/2022", "08/10/2022", "09/10/2022",
  "10/10/2022", "11/10/2022", "12/10/2022", "13/10/2022", "14/10/2022", "15/10/2022",
  "16/10/2022", "17/10/2022", "18/10/2022", "19/10/2022", "20/10/2022", "21/10/2022",
  "22/10/2022", "23/10/2022", "24/10/2022", "25/10/2022", "26/10/2022", "27/10/2022",
  "28/10/2022", "29/10/2022", "30/10/2022", "31/10/2022", "01/11/2022", "02/11/2022",
  "03/11/2022", "04/11/2022", "05/11/2022", "06/11/2022", "07/11/2022", "08/11/2022",
  "09/11/2022", "10/11/2022", "11/11/2022", "12/11/2022", "13/11/2022", "14/11/2022",
  "15/11/2022", "16/11/2022", "17/11/2022", "18/11/2022", "19/11/2022", "20/11/2022",
  "21/11/2022", "22/11/2022", "23/11/2022", "24/11/2022", "25/11/2022", "26/11/2022",
  "27/11/2022", "28/11/2022", "29/11/2022", "30/11/2022", "01/12/2022", "02/12/2022",
  "03/12/2022", "04/12/2022", "05/12/2022", "06/12/2022", "07/12/2022", "08/12/2022",
  "09/12/2022", "10/12/2022", "11/12/2022", "12/12/2022", "13/12/2022", "14/12/2022",
  "15/12/2022", "16/12/2022", "17/12/2022", "18/12/2022", "19/12/2022", "20/12/2022",
  "21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022", "25/12/2022", "26/12/2022",
  "27/12/2022", "28/12/2022", "29/12/2022", "30/12/2022", "31/12/2022"
};

      double[] prices = {
  3981.16, 3981.16, 3981.16, 4082.75, 4084.11, 4042.36, 4039.31, 4043.46, 4043.46, 4043.46, 
  4043.46, 4011.65, 3970.08, 3950.40, 3993.65, 3993.65, 3993.65, 3993.65, 4033.37, 4003.95, 
  3980.80, 3964.30, 3964.30, 3964.30, 3977.51, 3987.32, 3947.83, 3944.04, 3982.60, 3982.60, 
  3982.60, 3942.73, 3923.61, 3928.05, 3951.96, 3962.68, 3962.68, 3962.68, 3963.84, 3965.41, 
  3939.31, 3917.75, 3917.52, 3917.52, 3917.52, 3938.97, 3946.88, 3963.72, 3953.26, 3927.25, 
  3927.25, 3927.25, 3927.25, 3932.40, 3913.79, 3940.20, 3910.64, 3910.64, 3910.64, 3910.28, 
  3901.62, 3862.95, 3771.77, 3806.11, 3806.11, 3806.11, 3813.41, 3787.18, 3746.43, 3786.00, 
  3827.64, 3827.64, 3827.64, 3800.85, 3836.56, 3826.89, 3816.43, 3820.67, 3820.67, 3820.67, 
  3820.67, 3765.67, 3756.64, 3798.90, 3785.66, 3785.66, 3785.66, 3785.70, 3765.96, 3748.15, 
  3756.03, 3774.79, 3774.79, 3774.79, 3706.95, 3723.79, 3746.51, 3771.83, 3777.41, 3777.41, 
  3777.41, 3744.16, 3736.70, 3737.32, 3737.32, 3737.32, 3737.32, 3737.32, 3731.31, 3755.85, 
  3758.65, 3759.54, 3819.07, 3819.07, 3819.07, 3931.74, 3947.63, 3967.32, 3984.77, 3966.27, 
  3966.27, 3966.27, 4004.07, 4016.34, 4056.41, 4086.08, 4053.93, 4053.93, 4053.93, 4085.76, 
  4086.71, 4080.32, 4109.71, 4110.53, 4110.53, 4110.53, 4070.25, 4033.85, 4054.71, 4050.88, 
  3989.84, 3989.84, 3989.84, 3950.35, 3971.28, 3959.05, 3930.89, 3912.34, 3912.34, 3912.34, 
  3912.34, 3776.52, 3791.74, 3784.98, 3771.63, 3771.63, 3771.63, 3799.50, 3790.88, 3782.65, 
  3833.34, 3912.51, 3912.51, 3912.51, 4016.50, 3979.30, 3923.96, 3912.15, 3905.05, 3905.05, 
  3905.05, 3905.05, 4026.92, 4026.52, 4068.75, 4129.87, 4129.87, 4129.87, 4129.87, 4089.72, 
  4127.47, 4151.21, 4198.77, 4198.77, 4198.77, 4198.77, 4259.86, 4348.68, 4369.70, 4388.27, 
  4388.27, 4388.27, 4513.28, 4627.46, 4558.05, 4519.65, 4395.63, 4395.63, 4395.63, 4315.41, 
  4303.34, 4303.34, 4410.14, 4423.86, 4423.86, 4423.86, 4461.63, 4445.01, 4420.75, 4375.51, 
  4300.30, 4300.30, 4300.30, 4245.99, 4313.30, 4331.15, 4268.30, 4337.28, 4337.28, 4337.28, 
  4307.09, 4309.69, 4273.82, 4231.45, 4185.49, 4185.49, 4185.49, 4185.49, 4218.48, 4316.47, 
  4413.86, 4400.25, 4400.25, 4400.25, 4399.16, 4374.45, 4380.19, 4407.95, 4388.02, 4388.02, 
  4388.02, 4386.13, 4400.16, 4422.77, 4467.03, 4466.73, 4466.73, 4466.73, 4466.73, 4480.10, 
  4446.36, 4396.69, 4365.32, 4365.32, 4365.32, 4346.91, 4413.89, 4389.80, 4404.64, 4435.84, 
  4435.84, 4435.84, 4415.11, 4420.38, 4403.82, 4379.80, 4426.47, 4426.47, 4426.47, 4496.99, 
  4556.42, 4486.94, 4532.07, 4590.54, 4590.54, 4590.54, 4545.66, 4484.74, 4548.89, 4627.61, 
  4605.29, 4605.29, 4605.29, 4605.29, 4611.88, 4611.18, 4619.78, 4636.83, 4636.83, 4636.83, 
  4636.83, 4744.04, 4815.09, 4885.50, 4913.24, 4913.24, 4913.24, 4968.94, 4948.14, 4895.29, 
  4821.92, 4819.42, 4819.42, 4819.42, 4898.74, 4975.58, 5015.84, 5058.02, 5061.21, 5061.21, 
  5061.21, 5061.21, 5013.20, 4914.71, 4806.07, 4806.07, 4806.07, 4806.07, 4806.07, 4801.06, 
  4922.70, 5022.03, 4994.61, 4994.61, 4994.61, 4958.42, 4914.34, 4875.91, 4875.91, 4881.41, 
  4881.41, 4881.41, 4840.60, 4809.51, 4815.59, 4779.06, 4767.19, 4767.19, 4767.19, 4812.37, 
  4818.32, 4825.83, 4825.83, 4815.99, 4815.99, 4815.99, 4836.24, 4791.57, 4778.28, 4797.02, 
  4802.48, 4802.48, 4802.48, 4781.28, 4769.29, 4761.64, 4760.61, 4745.04, 4745.04, 4745.04, 
  4745.04, 4766.82, 4765.92, 4810.20, 4810.20
};

      long startTime = System.currentTimeMillis(); // Inicio del tiempo

      BubbleSort.sort(prices, dates);

      long endTime = System.currentTimeMillis(); // Fin del tiempo

      long totalTime = endTime - startTime; // Tiempo total de ejecución
      System.out.println("Tiempo de ejecución: " + totalTime + " milisegundos");

      // Memoria consumida
      Runtime runtime = Runtime.getRuntime();
      long memoryUsed = runtime.totalMemory() - runtime.freeMemory();
      System.out.println("Memoria consumida: " + memoryUsed + " bytes");

      // Cantidad de iteraciones
      int iterations = BubbleSort.iterationCount; // Accediendo a la variable de clase directamente
      System.out.println("Cantidad de iteraciones: " + iterations);
  }
}

class BubbleSort {
  // Variable estática para llevar el conteo de iteraciones
  static int iterationCount = 0;

  public static void sort(double[] arr, String[] dates) {
      int n = arr.length;
      double temp;
      String tempDate;

      for (int i = 0; i < n - 1; i++) {
          for (int j = 0; j < n - i - 1; j++) {
              if (arr[j] > arr[j + 1]) {
                  // Intercambiar elementos
                  temp = arr[j];
                  arr[j] = arr[j + 1];
                  arr[j + 1] = temp;

                  // Intercambiar fechas correspondientes
                  tempDate = dates[j];
                  dates[j] = dates[j + 1];
                  dates[j + 1] = tempDate;

                  iterationCount++;
              }
          }
      }
  }
}
`,
`public class Main {
  public static void main(String[] args) {
      // Arrays de fechas y precios
      String[] dates = {
"01/01/2022", "02/01/2022", "03/01/2022", "04/01/2022", "05/01/2022", "06/01/2022",
"07/01/2022", "08/01/2022", "09/01/2022", "10/01/2022", "11/01/2022", "12/01/2022",
"13/01/2022", "14/01/2022", "15/01/2022", "16/01/2022", "17/01/2022", "18/01/2022",
"19/01/2022", "20/01/2022", "21/01/2022", "22/01/2022", "23/01/2022", "24/01/2022",
"25/01/2022", "26/01/2022", "27/01/2022", "28/01/2022", "29/01/2022", "30/01/2022",
"31/01/2022", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022",
"06/02/2022", "07/02/2022", "08/02/2022", "09/02/2022", "10/02/2022", "11/02/2022",
"12/02/2022", "13/02/2022", "14/02/2022", "15/02/2022", "16/02/2022", "17/02/2022",
"18/02/2022", "19/02/2022", "20/02/2022", "21/02/2022", "22/02/2022", "23/02/2022",
"24/02/2022", "25/02/2022", "26/02/2022", "27/02/2022", "28/02/2022", "01/03/2022",
"02/03/2022", "03/03/2022", "04/03/2022", "05/03/2022", "06/03/2022", "07/03/2022",
"08/03/2022", "09/03/2022", "10/03/2022", "11/03/2022", "12/03/2022", "13/03/2022",
"14/03/2022", "15/03/2022", "16/03/2022", "17/03/2022", "18/03/2022", "19/03/2022",
"20/03/2022", "21/03/2022", "22/03/2022", "23/03/2022", "24/03/2022", "25/03/2022",
"26/03/2022", "27/03/2022", "28/03/2022", "29/03/2022", "30/03/2022", "31/03/2022",
"01/04/2022", "02/04/2022", "03/04/2022", "04/04/2022", "05/04/2022", "06/04/2022",
"07/04/2022", "08/04/2022", "09/04/2022", "10/04/2022", "11/04/2022", "12/04/2022",
"13/04/2022", "14/04/2022", "15/04/2022", "16/04/2022", "17/04/2022", "18/04/2022",
"19/04/2022", "20/04/2022", "21/04/2022", "22/04/2022", "23/04/2022", "24/04/2022",
"25/04/2022", "26/04/2022", "27/04/2022", "28/04/2022", "29/04/2022", "30/04/2022",
"01/05/2022", "02/05/2022", "03/05/2022", "04/05/2022", "05/05/2022", "06/05/2022",
"07/05/2022", "08/05/2022", "09/05/2022", "10/05/2022", "11/05/2022", "12/05/2022",
"13/05/2022", "14/05/2022", "15/05/2022", "16/05/2022", "17/05/2022", "18/05/2022",
"19/05/2022", "20/05/2022", "21/05/2022", "22/05/2022", "23/05/2022", "24/05/2022",
"25/05/2022", "26/05/2022", "27/05/2022", "28/05/2022", "29/05/2022", "30/05/2022",
"31/05/2022", "01/06/2022", "02/06/2022", "03/06/2022", "04/06/2022", "05/06/2022",
"06/06/2022", "07/06/2022", "08/06/2022", "09/06/2022", "10/06/2022", "11/06/2022",
"12/06/2022", "13/06/2022", "14/06/2022", "15/06/2022", "16/06/2022", "17/06/2022",
"18/06/2022", "19/06/2022", "20/06/2022", "21/06/2022", "22/06/2022", "23/06/2022",
"24/06/2022", "25/06/2022", "26/06/2022", "27/06/2022", "28/06/2022", "29/06/2022",
"30/06/2022", "01/07/2022", "02/07/2022", "03/07/2022", "04/07/2022", "05/07/2022",
"06/07/2022", "07/07/2022", "08/07/2022", "09/07/2022", "10/07/2022", "11/07/2022",
"12/07/2022", "13/07/2022", "14/07/2022", "15/07/2022", "16/07/2022", "17/07/2022",
"18/07/2022", "19/07/2022", "20/07/2022", "21/07/2022", "22/07/2022", "23/07/2022",
"24/07/2022", "25/07/2022", "26/07/2022", "27/07/2022", "28/07/2022", "29/07/2022",
"30/07/2022", "31/07/2022", "01/08/2022", "02/08/2022", "03/08/2022", "04/08/2022",
"05/08/2022", "06/08/2022", "07/08/2022", "08/08/2022", "09/08/2022", "10/08/2022",
"11/08/2022", "12/08/2022", "13/08/2022", "14/08/2022", "15/08/2022", "16/08/2022",
"17/08/2022", "18/08/2022", "19/08/2022", "20/08/2022", "21/08/2022", "22/08/2022",
"23/08/2022", "24/08/2022", "25/08/2022", "26/08/2022", "27/08/2022", "28/08/2022",
"29/08/2022", "30/08/2022", "31/08/2022", "01/09/2022", "02/09/2022", "03/09/2022",
"04/09/2022", "05/09/2022", "06/09/2022", "07/09/2022", "08/09/2022", "09/09/2022",
"10/09/2022", "11/09/2022", "12/09/2022", "13/09/2022", "14/09/2022", "15/09/2022",
"16/09/2022", "17/09/2022", "18/09/2022", "19/09/2022", "20/09/2022", "21/09/2022",
"22/09/2022", "23/09/2022", "24/09/2022", "25/09/2022", "26/09/2022", "27/09/2022",
"28/09/2022", "29/09/2022", "30/09/2022", "01/10/2022", "02/10/2022", "03/10/2022",
"04/10/2022", "05/10/2022", "06/10/2022", "07/10/2022", "08/10/2022", "09/10/2022",
"10/10/2022", "11/10/2022", "12/10/2022", "13/10/2022", "14/10/2022", "15/10/2022",
"16/10/2022", "17/10/2022", "18/10/2022", "19/10/2022", "20/10/2022", "21/10/2022",
"22/10/2022", "23/10/2022", "24/10/2022", "25/10/2022", "26/10/2022", "27/10/2022",
"28/10/2022", "29/10/2022", "30/10/2022", "31/10/2022", "01/11/2022", "02/11/2022",
"03/11/2022", "04/11/2022", "05/11/2022", "06/11/2022", "07/11/2022", "08/11/2022",
"09/11/2022", "10/11/2022", "11/11/2022", "12/11/2022", "13/11/2022", "14/11/2022",
"15/11/2022", "16/11/2022", "17/11/2022", "18/11/2022", "19/11/2022", "20/11/2022",
"21/11/2022", "22/11/2022", "23/11/2022", "24/11/2022", "25/11/2022", "26/11/2022",
"27/11/2022", "28/11/2022", "29/11/2022", "30/11/2022", "01/12/2022", "02/12/2022",
"03/12/2022", "04/12/2022", "05/12/2022", "06/12/2022", "07/12/2022", "08/12/2022",
"09/12/2022", "10/12/2022", "11/12/2022", "12/12/2022", "13/12/2022", "14/12/2022",
"15/12/2022", "16/12/2022", "17/12/2022", "18/12/2022", "19/12/2022", "20/12/2022",
"21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022", "25/12/2022", "26/12/2022",
"27/12/2022", "28/12/2022", "29/12/2022", "30/12/2022", "31/12/2022"
};
      double[] prices = {
3981.16, 3981.16, 3981.16, 4082.75, 4084.11, 4042.36, 4039.31, 4043.46, 4043.46, 4043.46, 
4043.46, 4011.65, 3970.08, 3950.40, 3993.65, 3993.65, 3993.65, 3993.65, 4033.37, 4003.95, 
3980.80, 3964.30, 3964.30, 3964.30, 3977.51, 3987.32, 3947.83, 3944.04, 3982.60, 3982.60, 
3982.60, 3942.73, 3923.61, 3928.05, 3951.96, 3962.68, 3962.68, 3962.68, 3963.84, 3965.41, 
3939.31, 3917.75, 3917.52, 3917.52, 3917.52, 3938.97, 3946.88, 3963.72, 3953.26, 3927.25, 
3927.25, 3927.25, 3927.25, 3932.40, 3913.79, 3940.20, 3910.64, 3910.64, 3910.64, 3910.28, 
3901.62, 3862.95, 3771.77, 3806.11, 3806.11, 3806.11, 3813.41, 3787.18, 3746.43, 3786.00, 
3827.64, 3827.64, 3827.64, 3800.85, 3836.56, 3826.89, 3816.43, 3820.67, 3820.67, 3820.67, 
3820.67, 3765.67, 3756.64, 3798.90, 3785.66, 3785.66, 3785.66, 3785.70, 3765.96, 3748.15, 
3756.03, 3774.79, 3774.79, 3774.79, 3706.95, 3723.79, 3746.51, 3771.83, 3777.41, 3777.41, 
3777.41, 3744.16, 3736.70, 3737.32, 3737.32, 3737.32, 3737.32, 3737.32, 3731.31, 3755.85, 
3758.65, 3759.54, 3819.07, 3819.07, 3819.07, 3931.74, 3947.63, 3967.32, 3984.77, 3966.27, 
3966.27, 3966.27, 4004.07, 4016.34, 4056.41, 4086.08, 4053.93, 4053.93, 4053.93, 4085.76, 
4086.71, 4080.32, 4109.71, 4110.53, 4110.53, 4110.53, 4070.25, 4033.85, 4054.71, 4050.88, 
3989.84, 3989.84, 3989.84, 3950.35, 3971.28, 3959.05, 3930.89, 3912.34, 3912.34, 3912.34, 
3912.34, 3776.52, 3791.74, 3784.98, 3771.63, 3771.63, 3771.63, 3799.50, 3790.88, 3782.65, 
3833.34, 3912.51, 3912.51, 3912.51, 4016.50, 3979.30, 3923.96, 3912.15, 3905.05, 3905.05, 
3905.05, 3905.05, 4026.92, 4026.52, 4068.75, 4129.87, 4129.87, 4129.87, 4129.87, 4089.72, 
4127.47, 4151.21, 4198.77, 4198.77, 4198.77, 4198.77, 4259.86, 4348.68, 4369.70, 4388.27, 
4388.27, 4388.27, 4513.28, 4627.46, 4558.05, 4519.65, 4395.63, 4395.63, 4395.63, 4315.41, 
4303.34, 4303.34, 4410.14, 4423.86, 4423.86, 4423.86, 4461.63, 4445.01, 4420.75, 4375.51, 
4300.30, 4300.30, 4300.30, 4245.99, 4313.30, 4331.15, 4268.30, 4337.28, 4337.28, 4337.28, 
4307.09, 4309.69, 4273.82, 4231.45, 4185.49, 4185.49, 4185.49, 4185.49, 4218.48, 4316.47, 
4413.86, 4400.25, 4400.25, 4400.25, 4399.16, 4374.45, 4380.19, 4407.95, 4388.02, 4388.02, 
4388.02, 4386.13, 4400.16, 4422.77, 4467.03, 4466.73, 4466.73, 4466.73, 4466.73, 4480.10, 
4446.36, 4396.69, 4365.32, 4365.32, 4365.32, 4346.91, 4413.89, 4389.80, 4404.64, 4435.84, 
4435.84, 4435.84, 4415.11, 4420.38, 4403.82, 4379.80, 4426.47, 4426.47, 4426.47, 4496.99, 
4556.42, 4486.94, 4532.07, 4590.54, 4590.54, 4590.54, 4545.66, 4484.74, 4548.89, 4627.61, 
4605.29, 4605.29, 4605.29, 4605.29, 4611.88, 4611.18, 4619.78, 4636.83, 4636.83, 4636.83, 
4636.83, 4744.04, 4815.09, 4885.50, 4913.24, 4913.24, 4913.24, 4968.94, 4948.14, 4895.29, 
4821.92, 4819.42, 4819.42, 4819.42, 4898.74, 4975.58, 5015.84, 5058.02, 5061.21, 5061.21, 
5061.21, 5061.21, 5013.20, 4914.71, 4806.07, 4806.07, 4806.07, 4806.07, 4806.07, 4801.06, 
4922.70, 5022.03, 4994.61, 4994.61, 4994.61, 4958.42, 4914.34, 4875.91, 4875.91, 4881.41, 
4881.41, 4881.41, 4840.60, 4809.51, 4815.59, 4779.06, 4767.19, 4767.19, 4767.19, 4812.37, 
4818.32, 4825.83, 4825.83, 4815.99, 4815.99, 4815.99, 4836.24, 4791.57, 4778.28, 4797.02, 
4802.48, 4802.48, 4802.48, 4781.28, 4769.29, 4761.64, 4760.61, 4745.04, 4745.04, 4745.04, 
4745.04, 4766.82, 4765.92, 4810.20, 4810.20
};

      // Inicio del tiempo
      long startTime = System.currentTimeMillis();

      // Ejecución del algoritmo de ordenamiento
      BubbleSortImproved.sort(prices, dates); // Suponiendo que tienes un método BubbleSortImproved

      // Fin del tiempo
      long endTime = System.currentTimeMillis();

      // Tiempo total de ejecución
      long totalTime = endTime - startTime;
      System.out.println("Tiempo de ejecución: " + totalTime + " milisegundos");

      // Memoria consumida
      Runtime runtime = Runtime.getRuntime();
      long memoryUsed = runtime.totalMemory() - runtime.freeMemory();
      System.out.println("Memoria consumida: " + memoryUsed + " bytes");

      // Cantidad de iteraciones (suponiendo que llevas un conteo dentro de tu algoritmo)
      int iterations = BubbleSortImproved.iterationCount; // Accediendo a la variable de clase directamente
      System.out.println("Cantidad de iteraciones: " + iterations);
  }
}

class BubbleSortImproved {
  // Variable estática para llevar el conteo de iteraciones
  static int iterationCount = 0;

  public static void sort(double[] arr, String[] dates) {
      int n = arr.length;
      double temp;
      String tempDate;
      boolean swapped;

      for (int i = 0; i < n - 1; i++) {
          swapped = false;
          for (int j = 0; j < n - i - 1; j++) {
              if (arr[j] > arr[j + 1]) {
                  // Intercambiar elementos
                  temp = arr[j];
                  arr[j] = arr[j + 1];
                  arr[j + 1] = temp;

                  // Intercambiar fechas correspondientes
                  tempDate = dates[j];
                  dates[j] = dates[j + 1];
                  dates[j + 1] = tempDate;

                  swapped = true;
                  iterationCount++;
              }
          }

          // Si no hubo intercambios en esta iteración, el array está ordenado
          if (!swapped) {
              break;
          }
      }

      System.out.println("Iteraciones realizadas: " + iterationCount);
  }
}

`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        // Array de fechas y precios
        String[] fechas = {
"01/01/2022", "02/01/2022", "03/01/2022", "04/01/2022", "05/01/2022", "06/01/2022",
"07/01/2022", "08/01/2022", "09/01/2022", "10/01/2022", "11/01/2022", "12/01/2022",
"13/01/2022", "14/01/2022", "15/01/2022", "16/01/2022", "17/01/2022", "18/01/2022",
"19/01/2022", "20/01/2022", "21/01/2022", "22/01/2022", "23/01/2022", "24/01/2022",
"25/01/2022", "26/01/2022", "27/01/2022", "28/01/2022", "29/01/2022", "30/01/2022",
"31/01/2022", "01/02/2022", "02/02/2022", "03/02/2022", "04/02/2022", "05/02/2022",
"06/02/2022", "07/02/2022", "08/02/2022", "09/02/2022", "10/02/2022", "11/02/2022",
"12/02/2022", "13/02/2022", "14/02/2022", "15/02/2022", "16/02/2022", "17/02/2022",
"18/02/2022", "19/02/2022", "20/02/2022", "21/02/2022", "22/02/2022", "23/02/2022",
"24/02/2022", "25/02/2022", "26/02/2022", "27/02/2022", "28/02/2022", "01/03/2022",
"02/03/2022", "03/03/2022", "04/03/2022", "05/03/2022", "06/03/2022", "07/03/2022",
"08/03/2022", "09/03/2022", "10/03/2022", "11/03/2022", "12/03/2022", "13/03/2022",
"14/03/2022", "15/03/2022", "16/03/2022", "17/03/2022", "18/03/2022", "19/03/2022",
"20/03/2022", "21/03/2022", "22/03/2022", "23/03/2022", "24/03/2022", "25/03/2022",
"26/03/2022", "27/03/2022", "28/03/2022", "29/03/2022", "30/03/2022", "31/03/2022",
"01/04/2022", "02/04/2022", "03/04/2022", "04/04/2022", "05/04/2022", "06/04/2022",
"07/04/2022", "08/04/2022", "09/04/2022", "10/04/2022", "11/04/2022", "12/04/2022",
"13/04/2022", "14/04/2022", "15/04/2022", "16/04/2022", "17/04/2022", "18/04/2022",
"19/04/2022", "20/04/2022", "21/04/2022", "22/04/2022", "23/04/2022", "24/04/2022",
"25/04/2022", "26/04/2022", "27/04/2022", "28/04/2022", "29/04/2022", "30/04/2022",
"01/05/2022", "02/05/2022", "03/05/2022", "04/05/2022", "05/05/2022", "06/05/2022",
"07/05/2022", "08/05/2022", "09/05/2022", "10/05/2022", "11/05/2022", "12/05/2022",
"13/05/2022", "14/05/2022", "15/05/2022", "16/05/2022", "17/05/2022", "18/05/2022",
"19/05/2022", "20/05/2022", "21/05/2022", "22/05/2022", "23/05/2022", "24/05/2022",
"25/05/2022", "26/05/2022", "27/05/2022", "28/05/2022", "29/05/2022", "30/05/2022",
"31/05/2022", "01/06/2022", "02/06/2022", "03/06/2022", "04/06/2022", "05/06/2022",
"06/06/2022", "07/06/2022", "08/06/2022", "09/06/2022", "10/06/2022", "11/06/2022",
"12/06/2022", "13/06/2022", "14/06/2022", "15/06/2022", "16/06/2022", "17/06/2022",
"18/06/2022", "19/06/2022", "20/06/2022", "21/06/2022", "22/06/2022", "23/06/2022",
"24/06/2022", "25/06/2022", "26/06/2022", "27/06/2022", "28/06/2022", "29/06/2022",
"30/06/2022", "01/07/2022", "02/07/2022", "03/07/2022", "04/07/2022", "05/07/2022",
"06/07/2022", "07/07/2022", "08/07/2022", "09/07/2022", "10/07/2022", "11/07/2022",
"12/07/2022", "13/07/2022", "14/07/2022", "15/07/2022", "16/07/2022", "17/07/2022",
"18/07/2022", "19/07/2022", "20/07/2022", "21/07/2022", "22/07/2022", "23/07/2022",
"24/07/2022", "25/07/2022", "26/07/2022", "27/07/2022", "28/07/2022", "29/07/2022",
"30/07/2022", "31/07/2022", "01/08/2022", "02/08/2022", "03/08/2022", "04/08/2022",
"05/08/2022", "06/08/2022", "07/08/2022", "08/08/2022", "09/08/2022", "10/08/2022",
"11/08/2022", "12/08/2022", "13/08/2022", "14/08/2022", "15/08/2022", "16/08/2022",
"17/08/2022", "18/08/2022", "19/08/2022", "20/08/2022", "21/08/2022", "22/08/2022",
"23/08/2022", "24/08/2022", "25/08/2022", "26/08/2022", "27/08/2022", "28/08/2022",
"29/08/2022", "30/08/2022", "31/08/2022", "01/09/2022", "02/09/2022", "03/09/2022",
"04/09/2022", "05/09/2022", "06/09/2022", "07/09/2022", "08/09/2022", "09/09/2022",
"10/09/2022", "11/09/2022", "12/09/2022", "13/09/2022", "14/09/2022", "15/09/2022",
"16/09/2022", "17/09/2022", "18/09/2022", "19/09/2022", "20/09/2022", "21/09/2022",
"22/09/2022", "23/09/2022", "24/09/2022", "25/09/2022", "26/09/2022", "27/09/2022",
"28/09/2022", "29/09/2022", "30/09/2022", "01/10/2022", "02/10/2022", "03/10/2022",
"04/10/2022", "05/10/2022", "06/10/2022", "07/10/2022", "08/10/2022", "09/10/2022",
"10/10/2022", "11/10/2022", "12/10/2022", "13/10/2022", "14/10/2022", "15/10/2022",
"16/10/2022", "17/10/2022", "18/10/2022", "19/10/2022", "20/10/2022", "21/10/2022",
"22/10/2022", "23/10/2022", "24/10/2022", "25/10/2022", "26/10/2022", "27/10/2022",
"28/10/2022", "29/10/2022", "30/10/2022", "31/10/2022", "01/11/2022", "02/11/2022",
"03/11/2022", "04/11/2022", "05/11/2022", "06/11/2022", "07/11/2022", "08/11/2022",
"09/11/2022", "10/11/2022", "11/11/2022", "12/11/2022", "13/11/2022", "14/11/2022",
"15/11/2022", "16/11/2022", "17/11/2022", "18/11/2022", "19/11/2022", "20/11/2022",
"21/11/2022", "22/11/2022", "23/11/2022", "24/11/2022", "25/11/2022", "26/11/2022",
"27/11/2022", "28/11/2022", "29/11/2022", "30/11/2022", "01/12/2022", "02/12/2022",
"03/12/2022", "04/12/2022", "05/12/2022", "06/12/2022", "07/12/2022", "08/12/2022",
"09/12/2022", "10/12/2022", "11/12/2022", "12/12/2022", "13/12/2022", "14/12/2022",
"15/12/2022", "16/12/2022", "17/12/2022", "18/12/2022", "19/12/2022", "20/12/2022",
"21/12/2022", "22/12/2022", "23/12/2022", "24/12/2022", "25/12/2022", "26/12/2022",
"27/12/2022", "28/12/2022", "29/12/2022", "30/12/2022", "31/12/2022"
};
      double[] precios = {
3981.16, 3981.16, 3981.16, 4082.75, 4084.11, 4042.36, 4039.31, 4043.46, 4043.46, 4043.46, 
4043.46, 4011.65, 3970.08, 3950.40, 3993.65, 3993.65, 3993.65, 3993.65, 4033.37, 4003.95, 
3980.80, 3964.30, 3964.30, 3964.30, 3977.51, 3987.32, 3947.83, 3944.04, 3982.60, 3982.60, 
3982.60, 3942.73, 3923.61, 3928.05, 3951.96, 3962.68, 3962.68, 3962.68, 3963.84, 3965.41, 
3939.31, 3917.75, 3917.52, 3917.52, 3917.52, 3938.97, 3946.88, 3963.72, 3953.26, 3927.25, 
3927.25, 3927.25, 3927.25, 3932.40, 3913.79, 3940.20, 3910.64, 3910.64, 3910.64, 3910.28, 
3901.62, 3862.95, 3771.77, 3806.11, 3806.11, 3806.11, 3813.41, 3787.18, 3746.43, 3786.00, 
3827.64, 3827.64, 3827.64, 3800.85, 3836.56, 3826.89, 3816.43, 3820.67, 3820.67, 3820.67, 
3820.67, 3765.67, 3756.64, 3798.90, 3785.66, 3785.66, 3785.66, 3785.70, 3765.96, 3748.15, 
3756.03, 3774.79, 3774.79, 3774.79, 3706.95, 3723.79, 3746.51, 3771.83, 3777.41, 3777.41, 
3777.41, 3744.16, 3736.70, 3737.32, 3737.32, 3737.32, 3737.32, 3737.32, 3731.31, 3755.85, 
3758.65, 3759.54, 3819.07, 3819.07, 3819.07, 3931.74, 3947.63, 3967.32, 3984.77, 3966.27, 
3966.27, 3966.27, 4004.07, 4016.34, 4056.41, 4086.08, 4053.93, 4053.93, 4053.93, 4085.76, 
4086.71, 4080.32, 4109.71, 4110.53, 4110.53, 4110.53, 4070.25, 4033.85, 4054.71, 4050.88, 
3989.84, 3989.84, 3989.84, 3950.35, 3971.28, 3959.05, 3930.89, 3912.34, 3912.34, 3912.34, 
3912.34, 3776.52, 3791.74, 3784.98, 3771.63, 3771.63, 3771.63, 3799.50, 3790.88, 3782.65, 
3833.34, 3912.51, 3912.51, 3912.51, 4016.50, 3979.30, 3923.96, 3912.15, 3905.05, 3905.05, 
3905.05, 3905.05, 4026.92, 4026.52, 4068.75, 4129.87, 4129.87, 4129.87, 4129.87, 4089.72, 
4127.47, 4151.21, 4198.77, 4198.77, 4198.77, 4198.77, 4259.86, 4348.68, 4369.70, 4388.27, 
4388.27, 4388.27, 4513.28, 4627.46, 4558.05, 4519.65, 4395.63, 4395.63, 4395.63, 4315.41, 
4303.34, 4303.34, 4410.14, 4423.86, 4423.86, 4423.86, 4461.63, 4445.01, 4420.75, 4375.51, 
4300.30, 4300.30, 4300.30, 4245.99, 4313.30, 4331.15, 4268.30, 4337.28, 4337.28, 4337.28, 
4307.09, 4309.69, 4273.82, 4231.45, 4185.49, 4185.49, 4185.49, 4185.49, 4218.48, 4316.47, 
4413.86, 4400.25, 4400.25, 4400.25, 4399.16, 4374.45, 4380.19, 4407.95, 4388.02, 4388.02, 
4388.02, 4386.13, 4400.16, 4422.77, 4467.03, 4466.73, 4466.73, 4466.73, 4466.73, 4480.10, 
4446.36, 4396.69, 4365.32, 4365.32, 4365.32, 4346.91, 4413.89, 4389.80, 4404.64, 4435.84, 
4435.84, 4435.84, 4415.11, 4420.38, 4403.82, 4379.80, 4426.47, 4426.47, 4426.47, 4496.99, 
4556.42, 4486.94, 4532.07, 4590.54, 4590.54, 4590.54, 4545.66, 4484.74, 4548.89, 4627.61, 
4605.29, 4605.29, 4605.29, 4605.29, 4611.88, 4611.18, 4619.78, 4636.83, 4636.83, 4636.83, 
4636.83, 4744.04, 4815.09, 4885.50, 4913.24, 4913.24, 4913.24, 4968.94, 4948.14, 4895.29, 
4821.92, 4819.42, 4819.42, 4819.42, 4898.74, 4975.58, 5015.84, 5058.02, 5061.21, 5061.21, 
5061.21, 5061.21, 5013.20, 4914.71, 4806.07, 4806.07, 4806.07, 4806.07, 4806.07, 4801.06, 
4922.70, 5022.03, 4994.61, 4994.61, 4994.61, 4958.42, 4914.34, 4875.91, 4875.91, 4881.41, 
4881.41, 4881.41, 4840.60, 4809.51, 4815.59, 4779.06, 4767.19, 4767.19, 4767.19, 4812.37, 
4818.32, 4825.83, 4825.83, 4815.99, 4815.99, 4815.99, 4836.24, 4791.57, 4778.28, 4797.02, 
4802.48, 4802.48, 4802.48, 4781.28, 4769.29, 4761.64, 4760.61, 4745.04, 4745.04, 4745.04, 
4745.04, 4766.82, 4765.92, 4810.20, 4810.20
};

        // Medir el tiempo de ejecución
        long startTime = System.nanoTime();

        // Llamar a Quick Sort
        quickSort(precios, fechas, 0, precios.length - 1);

        // Medir el tiempo de ejecución
        long endTime = System.nanoTime();
        long executionTime = endTime - startTime;

        // Obtener la cantidad de memoria consumida
        Runtime runtime = Runtime.getRuntime();
        long memory = runtime.totalMemory() - runtime.freeMemory();

        // Mostrar resultados
        System.out.println("Tiempo de ejecución: " + executionTime + " nanosegundos");
        System.out.println("Memoria utilizada: " + memory + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);

        // Mostrar fecha con mayor y menor precio
        System.out.println("Fecha con el precio más bajo: " + fechas[0] + " - $" + precios[0]);
        System.out.println("Fecha con el precio más alto: " + fechas[fechas.length - 1] + " - $" + precios[precios.length - 1]);
    }

    public static void quickSort(double[] arr, String[] fechas, int low, int high) {
        if (low < high) {
            // Obtener el índice del pivote
            int pi = partition(arr, fechas, low, high);

            // Ordenar por separado los elementos antes y después del pivote
            quickSort(arr, fechas, low, pi - 1);
            quickSort(arr, fechas, pi + 1, high);
        }
    }

    public static int partition(double[] arr, String[] fechas, int low, int high) {
        // Seleccionar el pivote (último elemento)
        double pivot = arr[high];
        int i = (low - 1);

        for (int j = low; j < high; j++) {
            // Si el elemento actual es menor que el pivote
            if (arr[j] < pivot) {
                i++;

                // Intercambiar arr[i] y arr[j]
                double temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;

                // Intercambiar fechas correspondientes
                String tempFecha = fechas[i];
                fechas[i] = fechas[j];
                fechas[j] = tempFecha;

                // Incrementar el contador de iteraciones
                iterations++;
            }
        }

        // Intercambiar arr[i+1] y arr[high] (o el pivote)
        double temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        // Intercambiar fechas correspondientes
        String tempFecha = fechas[i + 1];
        fechas[i + 1] = fechas[high];
        fechas[high] = tempFecha;

        // Incrementar el contador de iteraciones
        iterations++;

        return i + 1;
    }
}

`,
`import java.util.Arrays; 

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Juan", "María", "Carlos", "Ana", "Pedro", "Sofía", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier", "Lucía", "Pablo", "Valentina", "Andrés", "Camila", "José", "Andrea", "David", "Paula", "Fernando", "Martina", "Antonio", "Claudia", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "Raúl", "Natalia", "Iván", "Carmen", "Francisco", "Alba", "Rubén", "Elena", "Alberto", "Sara", "Adrián", "María", "Sergio", "Andrea", "Pablo", "Lucía", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "Raúl", "Clara", "Ángel", "Noelia", "Gabriel", "Cristina", "Jesús", "Martina", "Fernando", "Carmen", "Víctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "María", "Óscar", "Sara", "Rubén", "Julia", "Samuel", "Sofía", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "José", "Elena", "Mario", "Natalia", "Marcos", "Paula", "Adrián", "Marina", "Carlos", "Cristina", "Alberto", "Isabel"};
        long startTime = System.nanoTime();
        bubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void bubbleSort(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
                iterations++;
            }
        }
    }
}

`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Juan", "María", "Carlos", "Ana", "Pedro", "Sofía", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier", "Lucía", "Pablo", "Valentina", "Andrés", "Camila", "José", "Andrea", "David", "Paula", "Fernando", "Martina", "Antonio", "Claudia", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "Raúl", "Natalia", "Iván", "Carmen", "Francisco", "Alba", "Rubén", "Elena", "Alberto", "Sara", "Adrián", "María", "Sergio", "Andrea", "Pablo", "Lucía", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "Raúl", "Clara", "Ángel", "Noelia", "Gabriel", "Cristina", "Jesús", "Martina", "Fernando", "Carmen", "Víctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "María", "Óscar", "Sara", "Rubén", "Julia", "Samuel", "Sofía", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "José", "Elena", "Mario", "Natalia", "Marcos", "Paula", "Adrián", "Marina", "Carlos", "Cristina", "Alberto", "Isabel"};
        long startTime = System.nanoTime();
        improvedBubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void improvedBubbleSort(String[] arr) {
        int n = arr.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
                iterations++;
            }
            // If no two elements were swapped by inner loop, then break
            if (!swapped) {
                break;
            }
        }
    }
}

`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Juan", "María", "Carlos", "Ana", "Pedro", "Sofía", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier", "Lucía", "Pablo", "Valentina", "Andrés", "Camila", "José", "Andrea", "David", "Paula", "Fernando", "Martina", "Antonio", "Claudia", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "Raúl", "Natalia", "Iván", "Carmen", "Francisco", "Alba", "Rubén", "Elena", "Alberto", "Sara", "Adrián", "María", "Sergio", "Andrea", "Pablo", "Lucía", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "Raúl", "Clara", "Ángel", "Noelia", "Gabriel", "Cristina", "Jesús", "Martina", "Fernando", "Carmen", "Víctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "María", "Óscar", "Sara", "Rubén", "Julia", "Samuel", "Sofía", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "José", "Elena", "Mario", "Natalia", "Marcos", "Paula", "Adrián", "Marina", "Carlos", "Cristina", "Alberto", "Isabel"};
        long startTime = System.nanoTime();
        quickSort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void quickSort(String[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(String[] arr, int low, int high) {
        String pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j].compareTo(pivot) < 0) {
                i++;
                String temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            iterations++;
        }
        String temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}

`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Juan", "María", "Carlos", "Ana", "Pedro", "Sofía", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier", "Lucía", "Pablo", "Valentina", "Andrés", "Camila", "José", "Andrea", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "Raúl", "Natalia", "Iván", "Carmen", "Francisco", "Alba", "Rubén", "Elena", "Alberto", "Sara", "Adrián", "María", "Sergio", "Andrea", "Pablo", "Lucía", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "Raúl", "Clara", "Ángel", "Noelia", "Gabriel", "Cristina", "Jesús", "Martina", "Fernando", "Carmen", "Víctor", "Patricia",     "Ricardo", "Andrea", "Gonzalo", "María", "Óscar", "Sara", "Rubén", "Julia", "Samuel", "Sofía", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "José", "Elena", "Mario", "Natalia", "Marcos", "Paula", "Adrián", "Marina", "Carlos", "Cristina", "Alberto", "Isabel"};
        long startTime = System.nanoTime();
        bubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void bubbleSort(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
                iterations++;
            }
        }
    }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Juan", "María", "Carlos", "Ana", "Pedro", "Sofía", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier", "Lucía", "Pablo", "Valentina", "Andrés", "Camila", "José", "Andrea", "David", "Paula", "Fernando", "Martina", "Antonio", "Claudia", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "Raúl", "Natalia", "Iván", "Carmen", "Francisco", "Alba", "Rubén", "Elena", "Alberto", "Sara", "Adrián", "María", "Sergio", "Andrea", "Pablo", "Lucía", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "Raúl", "Clara", "Ángel", "Noelia", "Gabriel", "Cristina", "Jesús", "Martina", "Fernando", "Carmen", "Víctor", "Patricia", "Ricardo", "Andrea", "Gonzalo", "María", "Óscar", "Sara", "Rubén", "Julia", "Samuel", "Sofía", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "José", "Elena", "Mario", "Natalia", "Marcos", "Paula", "Adrián", "Marina", "Carlos", "Cristina", "Alberto", "Isabel"};
        long startTime = System.nanoTime();
        improvedBubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void improvedBubbleSort(String[] arr) {
        int n = arr.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
                iterations++;
            }
            // If no two elements were swapped by inner loop, then break
            if (!swapped) {
                break;
            }
        }
    }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Juan", "María", "Carlos", "Ana", "Pedro", "Sofía", "Luis", "Laura", "Diego", "Marta", "Miguel", "Elena", "Javier", "Lucía", "Pablo", "Valentina", "Andrés", "Camila", "José", "Andrea", "Daniel", "Beatriz", "Alejandro", "Sara", "Manuel", "Isabel", "Sergio", "Julia", "Jorge", "Victoria", "Raúl", "Natalia", "Iván", "Carmen", "Francisco", "Alba", "Rubén", "Elena", "Alberto", "Sara", "Adrián", "María", "Sergio", "Andrea", "Pablo", "Lucía", "Luis", "Paula", "Guillermo", "Marta", "Javier", "Laura", "Raúl", "Clara", "Ángel", "Noelia", "Gabriel", "Cristina", "Jesús", "Martina", "Fernando", "Carmen", "Víctor", "Patricia",     "Ricardo", "Andrea", "Gonzalo", "María", "Óscar", "Sara", "Rubén", "Julia", "Samuel", "Sofía", "Francisco", "Marta", "Diego", "Andrea", "Juan", "Laura", "Javier", "Clara", "José", "Elena", "Mario", "Natalia", "Marcos", "Paula", "Adrián", "Marina", "Carlos", "Cristina", "Alberto", "Isabel"};
        long startTime = System.nanoTime();
        quickSort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void quickSort(String[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(String[] arr, int low, int high) {
        String pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j].compareTo(pivot) < 0) {
                i++;
                String temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            iterations++;
        }
        String temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}
`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104};

      long startTime = System.nanoTime();
      int iterations = bubbleSort(array);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Iteraciones: " + iterations);
  }

  static int bubbleSort(int[] array) {
      int n = array.length;
      int iterations = 0;
      for (int i = 0; i < n-1; i++) {
          for (int j = 0; j < n-i-1; j++) {
              iterations++;
              if (array[j] > array[j+1]) {
                  // swap arr[j+1] and arr[i]
                  int temp = array[j];
                  array[j] = array[j+1];
                  array[j+1] = temp;
              }
          }
      }
      return iterations;
  }
}

`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104};

      long startTime = System.nanoTime();
      int iterations = improvedBubbleSort(array);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Iteraciones: " + iterations);
  }

  static int improvedBubbleSort(int[] array) {
      int n = array.length;
      int iterations = 0;
      boolean swapped;
      for (int i = 0; i < n-1; i++) {
          swapped = false;
          for (int j = 0; j < n-i-1; j++) {
              iterations++;
              if (array[j] > array[j+1]) {
                  // swap arr[j+1] and arr[i]
                  int temp = array[j];
                  array[j] = array[j+1];
                  array[j+1] = temp;
                  swapped = true;
              }
          }
          // Si no hubo intercambios en esta pasada, el array ya está ordenado
          if (!swapped) {
              break;
          }
      }
      return iterations;
  }
}

`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104};

      long startTime = System.nanoTime();
      int[] result = quickSort(array, 0, array.length - 1);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Comparaciones: " + result[0]);
  }

  static int[] quickSort(int[] array, int low, int high) {
      int comparisons = 0;
      if (low < high) {
          /* pi es el índice de partición, arr[pi] está en su lugar */
          int[] piResult = partition(array, low, high);
          int pi = piResult[0];
          comparisons += piResult[1];

          // Ordenar los elementos antes y después de la partición
          int[] leftResult = quickSort(array, low, pi - 1);
          int[] rightResult = quickSort(array, pi + 1, high);
          comparisons += leftResult[0] + rightResult[0];
      }
      return new int[]{comparisons};
  }

  static int[] partition(int[] array, int low, int high) {
      int pivot = array[high]; // pivote
      int i = (low - 1); // índice del elemento más pequeño
      int comparisons = 0;
      for (int j = low; j < high; j++) {
          // Si el elemento actual es menor que el pivote
          if (array[j] < pivot) {
              i++;

              // swap arr[i] y arr[j]
              int temp = array[i];
              array[i] = array[j];
              array[j] = temp;
          }
          comparisons++; // Incrementar el contador de comparaciones
      }

      // swap arr[i+1] y arr[high] (o el pivote)
      int temp = array[i + 1];
      array[i + 1] = array[high];
      array[high] = temp;

      return new int[]{i + 1, comparisons};
  }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Victoria", "Víctor", "Valentina", "Sofía", "Sofía", "Sergio", "Samuel", "Sara", "Sara", "Sara", "Sara", "Rubén", "Rubén", "Ricardo", "Raúl", "Raúl", "Pedro", "Patricia", "Pablo", "Pablo",     "Natalia", "Natalia", "Miguel", "María", "María", "María", "María", "Martina", "Martina", "Martina", "Marta", "Marta", "Marta", "Luis", "Luis", "Lucía", "Lucía", "Lucía", "Laura", "Laura", "Laura", "Laura", "Juan", "José", "José", "Jorge", "Jesús", "Javier", "Javier", "Iván", "Isabel", "Guillermo", "Gonzalo", "Gabriel", "Francisco", "Francisco", "Fernando", "Fernando", "Elena", "Elena", "Diego", "Diego", "Cristina", "Cristina", "Claudia", "Claudia", "Carmen", "Carmen", "Carlos", "Carlos", "Camila", "Camila", "Beatriz", "Beatriz", "Antonio", "Andrés", "Andrea", "Andrea", "Ana", "Alba", "Alejandro", "Alberto", "Adrián"};
        long startTime = System.nanoTime();
        bubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void bubbleSort(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
                iterations++;
            }
        }
    }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Victoria", "Víctor", "Valentina", "Sofía", "Sofía", "Sergio", "Samuel", "Sara", "Sara", "Sara", "Sara", "Rubén", "Rubén", "Ricardo", "Raúl", "Raúl", "Pedro", "Patricia", "Pablo", "Pablo",     "Natalia", "Natalia", "Miguel", "María", "María", "María", "María", "Martina", "Martina", "Martina", "Marta", "Marta", "Marta", "Luis", "Luis", "Lucía", "Lucía", "Lucía", "Laura", "Laura", "Laura", "Laura", "Juan", "José", "José", "Jorge", "Jesús", "Javier", "Javier", "Iván", "Isabel", "Guillermo", "Gonzalo", "Gabriel", "Francisco", "Francisco", "Fernando", "Fernando", "Elena", "Elena", "Diego", "Diego", "Cristina", "Cristina", "Claudia", "Claudia", "Carmen", "Carmen", "Carlos", "Carlos", "Camila", "Camila", "Beatriz", "Beatriz", "Antonio", "Andrés", "Andrea", "Andrea", "Ana", "Alba", "Alejandro", "Alberto", "Adrián"};
        long startTime = System.nanoTime();
        improvedBubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void improvedBubbleSort(String[] arr) {
        int n = arr.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
                iterations++;
            }
            // If no two elements were swapped by inner loop, then break
            if (!swapped) {
                break;
            }
        }
    }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Victoria", "Víctor", "Valentina", "Sofía", "Sofía", "Sergio", "Samuel", "Sara", "Sara", "Sara", "Sara", "Rubén", "Rubén", "Ricardo", "Raúl", "Raúl", "Pedro", "Patricia", "Pablo", "Pablo",     "Natalia", "Natalia", "Miguel", "María", "María", "María", "María", "Martina", "Martina", "Martina", "Marta", "Marta", "Marta", "Luis", "Luis", "Lucía", "Lucía", "Lucía", "Laura", "Laura", "Laura", "Laura", "Juan", "José", "José", "Jorge", "Jesús", "Javier", "Javier", "Iván", "Isabel", "Guillermo", "Gonzalo", "Gabriel", "Francisco", "Francisco", "Fernando", "Fernando", "Elena", "Elena", "Diego", "Diego", "Cristina", "Cristina", "Claudia", "Claudia", "Carmen", "Carmen", "Carlos", "Carlos", "Camila", "Camila", "Beatriz", "Beatriz", "Antonio", "Andrés", "Andrea", "Andrea", "Ana", "Alba", "Alejandro", "Alberto", "Adrián"};
        long startTime = System.nanoTime();
        quickSort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void quickSort(String[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(String[] arr, int low, int high) {
        String pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j].compareTo(pivot) < 0) {
                i++;
                String temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            iterations++;
        }
        String temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}
`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1106, 1105, 1104, 1103, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001};

      long startTime = System.nanoTime();
      int iterations = bubbleSort(array);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Iteraciones: " + iterations);
  }

  static int bubbleSort(int[] array) {
      int n = array.length;
      int iterations = 0;
      for (int i = 0; i < n-1; i++) {
          for (int j = 0; j < n-i-1; j++) {
              iterations++;
              if (array[j] > array[j+1]) {
                  // swap arr[j+1] and arr[i]
                  int temp = array[j];
                  array[j] = array[j+1];
                  array[j+1] = temp;
              }
          }
      }
      return iterations;
  }
}

`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1106, 1105, 1104, 1103, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001};

      long startTime = System.nanoTime();
      int iterations = improvedBubbleSort(array);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Iteraciones: " + iterations);
  }

  static int improvedBubbleSort(int[] array) {
      int n = array.length;
      int iterations = 0;
      boolean swapped;
      for (int i = 0; i < n-1; i++) {
          swapped = false;
          for (int j = 0; j < n-i-1; j++) {
              iterations++;
              if (array[j] > array[j+1]) {
                  // swap arr[j+1] and arr[i]
                  int temp = array[j];
                  array[j] = array[j+1];
                  array[j+1] = temp;
                  swapped = true;
              }
          }
          // Si no hubo intercambios en esta pasada, el array ya está ordenado
          if (!swapped) {
              break;
          }
      }
      return iterations;
  }
}

`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1106, 1105, 1104, 1103, 1100, 1099, 1098, 1097, 1096, 1095, 1094, 1092, 1091, 1090, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001};

      long startTime = System.nanoTime();
      int[] result = quickSort(array, 0, array.length - 1);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Comparaciones: " + result[0]);
  }

  static int[] quickSort(int[] array, int low, int high) {
      int comparisons = 0;
      if (low < high) {
          /* pi es el índice de partición, arr[pi] está en su lugar */
          int[] piResult = partition(array, low, high);
          int pi = piResult[0];
          comparisons += piResult[1];

          // Ordenar los elementos antes y después de la partición
          int[] leftResult = quickSort(array, low, pi - 1);
          int[] rightResult = quickSort(array, pi + 1, high);
          comparisons += leftResult[0] + rightResult[0];
      }
      return new int[]{comparisons};
  }

  static int[] partition(int[] array, int low, int high) {
      int pivot = array[high]; // pivote
      int i = (low - 1); // índice del elemento más pequeño
      int comparisons = 0;
      for (int j = low; j < high; j++) {
          // Si el elemento actual es menor que el pivote
          if (array[j] < pivot) {
              i++;

              // swap arr[i] y arr[j]
              int temp = array[i];
              array[i] = array[j];
              array[j] = temp;
          }
          comparisons++; // Incrementar el contador de comparaciones
      }

      // swap arr[i+1] y arr[high] (o el pivote)
      int temp = array[i + 1];
      array[i + 1] = array[high];
      array[high] = temp;

      return new int[]{i + 1, comparisons};
  }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Sofía", "Martina", "Lucía", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "Jesús", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "María", "Sara", "Gonzalo", "Marta", "Ricardo", "José",    "Lucía", "Adrián", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "Rubén",    "María", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "Andrés", "Víctor", "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "Adrián", "Lucía", "María", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo", "Lucía", "Andrea", "Lucía", "Laura",    "Carmen", "Sergio", "José", "Carlos", "María", "Laura", "Javier", "Laura", "Ricardo", "Andrea", "María",    "Alberto", "Laura", "Fernando",    "Sofía", "Martina", "Lucía", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "Jesús", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "María", "Sara", "Gonzalo", "Marta", "Ricardo", "José",    "Lucía", "Adrián", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "Rubén",    "María", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "Andrés", "Víctor", "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "Adrián", "Lucía", "María", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo", "Lucía", "Andrea", "Lucía", "Laura",    "Carmen", "Sergio", "José", "Carlos", "María", "Laura", "Javier", "Laura", "Ricardo", "Andrea", "María",    "Alberto", "Laura", "Fernando"};
        long startTime = System.nanoTime();
        bubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void bubbleSort(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
                iterations++;
            }
        }
    }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Sofía", "Martina", "Lucía", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "Jesús", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "María", "Sara", "Gonzalo", "Marta", "Ricardo", "José",    "Lucía", "Adrián", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "Rubén",    "María", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "Andrés", "Víctor", "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "Adrián", "Lucía", "María", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo", "Lucía", "Andrea", "Lucía", "Laura",    "Carmen", "Sergio", "José", "Carlos", "María", "Laura", "Javier", "Laura", "Ricardo", "Andrea", "María",    "Alberto", "Laura", "Fernando",    "Sofía", "Martina", "Lucía", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "Jesús", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "María", "Sara", "Gonzalo", "Marta", "Ricardo", "José",    "Lucía", "Adrián", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "Rubén",    "María", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "Andrés", "Víctor", "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "Adrián", "Lucía", "María", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo", "Lucía", "Andrea", "Lucía", "Laura",    "Carmen", "Sergio", "José", "Carlos", "María", "Laura", "Javier", "Laura", "Ricardo", "Andrea", "María",    "Alberto", "Laura", "Fernando"};
        long startTime = System.nanoTime();
        improvedBubbleSort(arr);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void improvedBubbleSort(String[] arr) {
        int n = arr.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
                iterations++;
            }
            // If no two elements were swapped by inner loop, then break
            if (!swapped) {
                break;
            }
        }
    }
}
`,
`import java.util.Arrays;

public class Main {
    private static int iterations = 0;

    public static void main(String[] args) {
        String[] arr = {"Sofía", "Martina", "Lucía", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "Jesús", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "María", "Sara", "Gonzalo", "Marta", "Ricardo", "José",    "Lucía", "Adrián", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "Rubén",    "María", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "Andrés", "Víctor", "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "Adrián", "Lucía", "María", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo", "Lucía", "Andrea", "Lucía", "Laura",    "Carmen", "Sergio", "José", "Carlos", "María", "Laura", "Javier", "Laura", "Ricardo", "Andrea", "María",    "Alberto", "Laura", "Fernando",    "Sofía", "Martina", "Lucía", "Natalia", "Andrea", "Laura", "Carlos", "Ana", "Jesús", "Alejandro",    "Valentina", "Pedro", "Isabel", "Gabriel", "María", "Sara", "Gonzalo", "Marta", "Ricardo", "José",    "Lucía", "Adrián", "Samuel", "Diego", "Cristina", "Alberto", "Sara", "Pablo", "Laura", "Cristina",    "Claudia", "Marta", "Fernando", "Alba", "Victoria", "Laura", "Guillermo", "Sara", "Antonio", "Rubén",    "María", "Javier", "Beatriz", "Laura", "Francisco", "Ricardo", "Andrés", "Víctor", "Ricardo", "Jorge",    "Javier", "Patricia", "Natalia", "Carmen", "Alejandro", "Beatriz", "Laura", "Laura", "Laura", "Pablo",    "Martina", "Ricardo", "Ricardo", "Javier", "Sara", "Diego", "Laura", "Adrián", "Lucía", "María", "Laura",    "Laura", "Alberto", "Laura", "Sara", "Francisco", "Andrea", "Pablo", "Lucía", "Andrea", "Lucía", "Laura",    "Carmen", "Sergio", "José", "Carlos", "María", "Laura", "Javier", "Laura", "Ricardo", "Andrea", "María",    "Alberto", "Laura", "Fernando"};
        long startTime = System.nanoTime();
        quickSort(arr, 0, arr.length - 1);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime); // Tiempo en milisegundos

        System.out.println("Tiempo de ejecucion: " + duration + " nanosegundos");
        System.out.println("Memoria consumida: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) + " bytes");
        System.out.println("Cantidad de iteraciones: " + iterations);
    }

    public static void quickSort(String[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(String[] arr, int low, int high) {
        String pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j].compareTo(pivot) < 0) {
                i++;
                String temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            iterations++;
        }
        String temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}
`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104, 1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104};

      long startTime = System.nanoTime();
      int iterations = bubbleSort(array);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Iteraciones: " + iterations);
  }

  static int bubbleSort(int[] array) {
      int n = array.length;
      int iterations = 0;
      for (int i = 0; i < n-1; i++) {
          for (int j = 0; j < n-i-1; j++) {
              iterations++;
              if (array[j] > array[j+1]) {
                  // swap arr[j+1] and arr[i]
                  int temp = array[j];
                  array[j] = array[j+1];
                  array[j+1] = temp;
              }
          }
      }
      return iterations;
  }
}

`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104, 1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104};

      long startTime = System.nanoTime();
      int iterations = improvedBubbleSort(array);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Iteraciones: " + iterations);
  }

  static int improvedBubbleSort(int[] array) {
      int n = array.length;
      int iterations = 0;
      boolean swapped;
      for (int i = 0; i < n-1; i++) {
          swapped = false;
          for (int j = 0; j < n-i-1; j++) {
              iterations++;
              if (array[j] > array[j+1]) {
                  // swap arr[j+1] and arr[i]
                  int temp = array[j];
                  array[j] = array[j+1];
                  array[j+1] = temp;
                  swapped = true;
              }
          }
          // Si no hubo intercambios en esta pasada, el array ya está ordenado
          if (!swapped) {
              break;
          }
      }
      return iterations;
  }
}

`,
`public class Main {
  public static void main(String[] args) {
      int[] array = {1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104, 1098, 1027, 1007, 1002, 1020, 1001, 1021, 1106, 1019, 1084, 1052, 1044, 1008, 1097, 1006, 1026, 1089, 1030, 1088, 1035, 1094, 1036, 1016, 1022, 1054, 1014, 1009, 1067, 1045, 1087, 1064, 1003, 1074, 1091, 1018, 1023, 1071, 1039, 1032, 1062, 1037, 1043, 1031, 1041, 1028, 1010, 1068, 1056, 1073, 1034, 1050, 1060, 1081, 1049, 1040, 1065, 1092, 1053, 1079, 1029, 1090, 1047, 1057, 1095, 1013, 1066, 1075, 1017, 1083, 1069, 1011, 1076, 1015, 1042, 1082, 1070, 1048, 1025, 1086, 1096, 1058, 1059, 1078, 1099, 1077, 1085, 1061, 1080, 1033, 1038, 1004, 1005, 1012, 1024, 1051, 1055, 1046, 1072, 1100, 1103, 1105, 1104};

      long startTime = System.nanoTime();
      int[] result = quickSort(array, 0, array.length - 1);
      long endTime = System.nanoTime();

      System.out.println("Tiempo de ejecución (en nanosegundos): " + ((endTime - startTime)));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Comparaciones: " + result[0]);
  }

  static int[] quickSort(int[] array, int low, int high) {
      int comparisons = 0;
      if (low < high) {
          /* pi es el índice de partición, arr[pi] está en su lugar */
          int[] piResult = partition(array, low, high);
          int pi = piResult[0];
          comparisons += piResult[1];

          // Ordenar los elementos antes y después de la partición
          int[] leftResult = quickSort(array, low, pi - 1);
          int[] rightResult = quickSort(array, pi + 1, high);
          comparisons += leftResult[0] + rightResult[0];
      }
      return new int[]{comparisons};
  }

  static int[] partition(int[] array, int low, int high) {
      int pivot = array[high]; // pivote
      int i = (low - 1); // índice del elemento más pequeño
      int comparisons = 0;
      for (int j = low; j < high; j++) {
          // Si el elemento actual es menor que el pivote
          if (array[j] < pivot) {
              i++;

              // swap arr[i] y arr[j]
              int temp = array[i];
              array[i] = array[j];
              array[j] = temp;
          }
          comparisons++; // Incrementar el contador de comparaciones
      }

      // swap arr[i+1] y arr[high] (o el pivote)
      int temp = array[i + 1];
      array[i + 1] = array[high];
      array[high] = temp;

      return new int[]{i + 1, comparisons};
  }
}
`,
`public class Main {
  public static void main(String[] args) {
      int[] array = generatePartiallySortedArray(1000);
      
      long startTime = System.nanoTime();
      int[] result = bubbleSort(array);
      long endTime = System.nanoTime();
      
      System.out.println("Tiempo de ejecución (en milisegundos): " + ((endTime - startTime) / 1000000));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Comparaciones: " + result[0]);
  }
  
  static int[] bubbleSort(int[] array) {
      int n = array.length;
      int comparisons = 0;
      for (int i = 0; i < n - 1; i++) {
          for (int j = 0; j < n - i - 1; j++) {
              if (array[j] > array[j + 1]) {
                  // swap temp and array[i]
                  int temp = array[j];
                  array[j] = array[j + 1];
                  array[j + 1] = temp;
              }
              comparisons++;
          }
      }
      return new int[]{comparisons};
  }
  
  static int[] generatePartiallySortedArray(int size) {
      int[] array = new int[size];
      int half = size / 2;
      for (int i = 0; i < half; i++) {
          array[i] = i;
      }
      for (int i = half; i < size; i++) {
          array[i] = (int) (Math.random() * size);
      }
      return array;
  }
}
`,
`public class Main {
  public static void main(String[] args) {
      int[] array = generatePartiallySortedArray(1000);
      
      long startTime = System.nanoTime();
      int[] result = bubbleSortImproved(array);
      long endTime = System.nanoTime();
      
      System.out.println("Tiempo de ejecución (en milisegundos): " + ((endTime - startTime) / 1000000));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Comparaciones: " + result[0]);
  }
  
  static int[] bubbleSortImproved(int[] array) {
      int n = array.length;
      int comparisons = 0;
      boolean swapped;
      for (int i = 0; i < n - 1; i++) {
          swapped = false;
          for (int j = 0; j < n - i - 1; j++) {
              if (array[j] > array[j + 1]) {
                  // swap temp and array[i]
                  int temp = array[j];
                  array[j] = array[j + 1];
                  array[j + 1] = temp;
                  swapped = true;
              }
              comparisons++;
          }
          if (!swapped) {
              break;
          }
      }
      return new int[]{comparisons};
  }
  
  static int[] generatePartiallySortedArray(int size) {
      int[] array = new int[size];
      int half = size / 2;
      for (int i = 0; i < half; i++) {
          array[i] = i;
      }
      for (int i = half; i < size; i++) {
          array[i] = (int) (Math.random() * size);
      }
      return array;
  }
}
`,
`public class Main {
  public static void main(String[] args) {
      int[] array = generatePartiallySortedArray(1000);
      
      long startTime = System.nanoTime();
      int[] result = quickSort(array, 0, array.length - 1);
      long endTime = System.nanoTime();
      
      System.out.println("Tiempo de ejecución (en milisegundos): " + ((endTime - startTime) / 1000000));
      System.out.println("Memoria consumida (en bytes): " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()));
      System.out.println("Comparaciones: " + result[0]);
  }
  
  static int[] quickSort(int[] array, int low, int high) {
      int comparisons = 0;
      if (low < high) {
          int[] piResult = partition(array, low, high);
          int pi = piResult[0];
          comparisons += piResult[1];
          
          int[] leftResult = quickSort(array, low, pi - 1);
          int[] rightResult = quickSort(array, pi + 1, high);
          comparisons += leftResult[0] + rightResult[0];
      }
      return new int[]{comparisons};
  }
  
  static int[] partition(int[] array, int low, int high) {
      int pivot = array[high];
      int i = low - 1;
      int comparisons = 0;
      for (int j = low; j < high; j++) {
          if (array[j] < pivot) {
              i++;
              int temp = array[i];
              array[i] = array[j];
              array[j] = temp;
          }
          comparisons++;
      }
      int temp = array[i + 1];
      array[i + 1] = array[high];
      array[high] = temp;
      return new int[]{i + 1, comparisons};
  }
  
  static int[] generatePartiallySortedArray(int size) {
      int[] array = new int[size];
      int half = size / 2;
      for (int i = 0; i < half; i++) {
          array[i] = i;
      }
      for (int i = half; i < size; i++) {
          array[i] = (int) (Math.random() * size);
      }
      return array;
  }
}

`,
`import java.util.*;

class Main {
    public static String[] generarArregloNombres(int cantidad) {
        String[] nombres = new String[cantidad];
        String[] iniciales = {"Ana", "Luis", "María", "David", "Sofía", "Carlos", "Elena", "Alejandro", "Isabella", "Juan", "Valentina", "Andrea", "Pedro", "Camila", "Fernando", "Laura", "Diego", "Carolina", "Gabriel", "Javier", "Ana", "Miguel", "Paula", "Max", "Bianca", "Daniel", "Isaac", "Olivia", "Ava", "Liam", "Eva", "Mia", "Sophia", "Amelia", "Isabella", "Luna", "Alexander", "Benjamin", "William", "Emma", "Oliver", "Noah", "Ethan", "Henry", "James", "Arjun", "Mateo", "Lucas"};
        Random rand = new Random();
        for (int i = 0; i < cantidad; i++) {
            int index = rand.nextInt(iniciales.length);
            nombres[i] = iniciales[index];
        }
        return nombres;
    }

    public static void main(String[] args) {
        int cantidadNombres = 10000; // Puedes ajustar la cantidad de nombres aquí
        String[] nombres = generarArregloNombres(cantidadNombres);

        // Contar repeticiones de nombres
        Map<String, Integer> contadorNombres = new HashMap<>();
        for (String nombre : nombres) {
            contadorNombres.put(nombre, contadorNombres.getOrDefault(nombre, 0) + 1);
        }

        // Ordenar por nombre
        List<Map.Entry<String, Integer>> listaEntradas = new ArrayList<>(contadorNombres.entrySet());
        Collections.sort(listaEntradas, (a, b) -> a.getKey().compareTo(b.getKey()));

        // Imprimir lista ordenada por nombre
        System.out.println("Lista ordenada por nombre:");
        for (Map.Entry<String, Integer> entrada : listaEntradas) {
            System.out.println(entrada.getKey() + ": " + entrada.getValue() + " veces");
        }

        // Ordenar por cantidad de repeticiones
        Collections.sort(listaEntradas, (a, b) -> b.getValue().compareTo(a.getValue()));

        // Imprimir lista ordenada por cantidad de repeticiones
        System.out.println("\nLista ordenada por cantidad de repeticiones:");
        for (Map.Entry<String, Integer> entrada : listaEntradas) {
            System.out.println(entrada.getKey() + ": " + entrada.getValue() + " veces");
        }
    }
}
`

]
const corte1 = document.getElementById("corte1");
const titleP1 = document.getElementById('titleP1');


// // CORTE 2
// const enunciadosP2 = [
//   "Ciclo for", "Ciclo for 1", "Ciclo for 2", "Ciclo for 3", "Ciclo for 4", "Numeros pares del uno al cien", "Numeros impares del uno al cien", "Numeros del 50 al 100 en un ciclo for", "Numeros del 0 al 50 en un ciclo for", "Conteo regresivo", "Tabla de multiplicar", "Tablas de multiplicar del 1 al 10", "Hallar factorial", "Suma de N numeros", "Promedio de la sumatoria hasta 1024", "¿Que hace el codigo?", "Calculadora de numeros primos hasta N", "Secuencia de fibonacci hasta N", "Calcular la suma de elementos de manera indeterminadda", "Promedio de la suma de elementos de manera indeterminada", "Tablas de multiplicar hasta N con while", "Sumatoria de todos los pares menores o iguales a 100", "Sumatoria de impares menores o iguales a 100", "Calculo de 16! con while", "Calcular la longitud de un numero", "Saber si un numero es primo", "Funcionamiento de las posiciones de un array", "Accediendo a los arrays por teclado", "Organizacion de arrays por metodo burbuja", "Organizacion de arrays por metodo burbuja de manera descendente", "Sumatoria de los elementos de un array", "Producto de los elementos de un array", "Numero mayor y menor de un array", "Encontrar los numeros pares y impares de un arreglo", "Eliminar elementos duplicados de un array", "Invertir los elementos de un array", "Unir dos arrays"
// ]
// const codigoP2 = [`#include <iostream>
// using namespace std;

// int main() {
//   cout << "Ciclo for \n";

//   for (int i = 0; i <= 100; i++) {
//     cout << i;
//     cout << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "for 1\n";

//   for (int i = 0; i <= 100; i++) {
//     cout << i;
//     cout << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "for 2";

//   for (int i = 0; i < 100; i++) {
//     cout << i;
//     cout << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "for 3\n";

//   for (int i = 1; i <= 100; i++) {
//     cout << i;
//     cout << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "for 4\n";

//   for (int i = 1; i < 100; i++) {
//     cout << i;
//     cout << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {

//   cout << "Numeros pares del uno al cien";

//   for (int i = 0; i <= 100; i = i + 2) {
//     cout << i << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {

//   cout << "Numeros impares del uno al cien";

//   for (int i = 1; i <= 100; i = i + 2) {
//     cout << i << "\n";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "Numeros del 50 al 100 en un ciclo for: " << endl;

//   for (int i = 50; i <= 100; i ++) {
//     cout << i << endl;
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "Numeros del 0 al 50 en un ciclo for: " << endl;

//   for (int i = 0; i <= 50; i ++) {
//     cout << i << endl;
//   }
// }`, `#include <chrono>
// #include <iostream>
// #include <thread>

// using namespace std;

// int main() {
//   int n;

//   cout << "Ingrese de cuanto quiere que sea el conteo regresivo: ";
//   cin >> n;

//   for (int i = n; i >= 0; i--) {
//     cout << i << "\n";
//     this_thread::sleep_for(chrono::seconds(1)); // Pausa durante 1 segundo
//   }

//   cout << "*despega*";
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   int n;

//   cout << "Ingrese la tabla que desea conocer: ";
//   cin >> n;

//   cout << "\n";


//   cout << "───────────────────────────────────\n";
//   cout << "    Tabla de multiplicar del "<< n <<"\n";
//   cout << "───────────────────────────────────\n";

//   for (int i = 1; i <= 10; i++) {
//     if (i*n > 9){
//       if(i > 9){
//         cout << "|  " << n << " | x | "<< i <<" |  " << n * i << "        |\n";
//       }else{
//         cout << "|  " << n << " | x | "<< i <<"  |  " << n * i << "        |\n";
//       }
//     }
//     else{
//       if(i > 9){
//         cout << "|  " << n << " | x | "<< i <<" |  " << n * i << "         |\n";
//       }else{
//         cout << "|  " << n << " | x | "<< i <<"  |  " << n * i << "         |\n";
//       }
//     }
    
//   }

//   cout << "───────────────────────────────────";

//   return 0;
// }`, `#include <iostream>
// using namespace std;

// int main() {

//   for (int i = 1; i <= 10; i++){
      
//     cout << "───────────────────────────────────\n";
//     cout << "    Tabla de multiplicar del "<< i <<"\n";
//     cout << "───────────────────────────────────\n";
  
//     for (int j = 1; j <= 10; j++) {
//       if (j*i > 9 and i*j < 100){
//         if(j > 9){
//           cout << "|  " << i << " | x | "<< j <<" |  " << i * j << "        |\n";
//         }else{
//           cout << "|  " << i << " | x | "<< j <<"  |  " << i * j << "        |\n";
//         }
//       }
//       else if(i*j == 100){
//         cout << "|  " << i << " | x | "<< j <<" |  " << i * j << "       |\n";
//       }
//       else{
//         if(j > 9){
//           cout << "|  " << i << " | x | "<< j <<" |  " << i * j << "         |\n";
//         }else{
//           cout << "|  " << i << " | x | "<< j <<"  |  " << i * j << "         |\n";
//         }
//       }
      
//     }
//     cout << "───────────────────────────────────\n";
    
//   }


//   return 0;
// }`, `#include <iostream>
// using namespace std;
// int main() {
//   int n, res = 1;

//   cout << "Ingrese el numero del cual quiere hallar el factorial: ";
//   cin >> n;

//   for (int i = 1; i <= n; i++) {
//     res = res * i;
//   }

//   cout << res;
// }`, `#include <iostream>
// using namespace std;
// int main() {
//   int n;
//   float res = 0, aux;
//   cout << "Ingrese la cantidad de numeros de la lista: ";
//   cin >> n;
//   cout << "\n";

//   for (int i = 1; i <= n; i++) {
//     cout << "Ingrese el numero " << i << ": ";
//     cin >> aux;
//     res += aux;
//   }

//   cout << "La suma de los numeros de la lista es de: " << res << endl;
// }`, `#include <iostream>
// using namespace std;
// int main() {

//   float res = 0;

//   cout << "Promedio de la sumatoria de n hasta 1024" << endl;

//   for (int i = 1; i <= 1024; i++) {
//     res += i;
//   }
//   cout << "La sumatoria de 1 hasta 1024 es de: "<< res <<endl;
//   cout << "por lo que su promedio es "<< res<< "/1024 esto da un resultado de: "<< res/1024 ;

// }`, `#include <iostream>
// using namespace std;

// int main() {

//   for (int i = 64; i <= 122; i++) {
//     cout << char(i) << "\n";
//   }

//   cout<<"El codigo anterior combierte la i (que va desde 64 hasta 122 tomando ambos valores)" << endl;
//   cout<< "en codigo ascii, es decir combierte el entero en un caracter tipo char";
// }`, `#include <iostream>
// using namespace std;
// int main() {
//   int n;
//   float modulo;

//   cout << "─────────────────────────────────────" << endl;
//   cout << "Calculadora de numeros primos hasta n" << endl;
//   cout << "─────────────────────────────────────" << endl;
//   cout << "Ingrese hasta donde quiere que vaya el conteo: ";
//   cin >> n;

//   cout << endl;
//   cout << "║  Numeros primos hasta " << n << "  ║" << endl;

//   cout << "╔══════════╗" << endl;
//   for (int i = 1; i <= n; i++) {
//     int contador = 0;

//     for (int j = 1; j <= i; j++) {

//       if (i % j == 0) {
//         contador++;
//       }
//     }
//     if (contador == 2) {
//       if (i < 10) {
//         cout << "║    " << i << "     ║" << endl;
//       } else if (i < 100) {
//         cout << "║    " << i << "    ║" << endl;
//       }
//     }
//   }
//   cout << "╚══════════╝" << endl;
// }`, `#include <iostream>

// using namespace std;

// int main() {
//   int n;

//   cout << "Secuencia de digitos de fibonacci" << endl;
//   cout << "Ingrese la cantidad de digitos que desea conocer:";
//   cin >> n;

//   int a = 0, b = 1, c;

//   for (int i = 0; i < n; i++) {
//     cout << a << " ";
//     c = a + b;
//     a = b;
//     b = c;
//   }

//   return 0;
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   double dato, total, contador = 1;
//   cout << "Programa para hacer la suma de numeros de manera indeterminada"<< endl;
//   cout << "Ingrese el primer dato: ";
//   cin >> dato;
//   total = dato;

//   while (dato >= 0) {
//     cout << "Ingrese el siguiente dato: ";
//     cin >> dato;
//     total += dato;
//     contador++;
//   }
//   total-= dato;

//   cout << "Fin de la secuencia, ha registrado " << contador << " datos, dando una suma de: " << total;
// } `, `#include <iostream>
// using namespace std;

// int main() {
//   double dato, total, contador = 1;
//   cout << "Programa para hacer la suma de numeros de manera indeterminada"<< endl;
//   cout << "Ingrese el primer dato: ";
//   cin >> dato;
//   total = dato;

//   while (dato >= 0) {
//     cout << "Ingrese el siguiente dato: ";
//     cin >> dato;
//     total += dato;
//     contador++;
//   }
//   total-= dato;
//   contador-= 1;

//   cout << "Fin de la secuencia, ha registrado " << contador << " datos, dando una suma de: " << total<<endl;

//   cout << "Dando un promedio de: "<< total/contador;
// } `, `#include <iostream>
// using namespace std;

// int main() {
//   int tabla, contador=1;
//   cout << "Ingrese hasta que numero quiere ver las tablas de multiplicar: ";
//   cin >> tabla;

//   while (contador <= tabla){
      
//     cout << "───────────────────────────────────\n";
//     cout << "    Tabla de multiplicar del "<< contador <<"\n";
//     cout << "───────────────────────────────────\n";
  
//     for (int j = 1; j <= 10; j++) {
//       if (j*contador > 9 and contador*j < 100){
//         if(j > 9){
//           cout << "|  " << contador << " | x | "<< j <<" |  " << contador * j << "        |\n";
//         }else{
//           cout << "|  " << contador << " | x | "<< j <<"  |  " << contador * j << "        |\n";
//         }
//       }
//       else if(contador*j == 100){
//         cout << "|  " << contador << " | x | "<< j <<" |  " << contador * j << "       |\n";
//       }
//       else{
//         if(j > 9){
//           cout << "|  " << contador << " | x | "<< j <<" |  " << contador * j << "         |\n";
//         }else{
//           cout << "|  " << contador << " | x | "<< j <<"  |  " << contador * j << "         |\n";
//         }
//       }
//     }

//     contador++;
//     cout << "───────────────────────────────────\n";
    
//   }


//   return 0;
// }`, `#include <iostream>
// using namespace std;

// int main() {

//   int contador = 0, total = 0;

//   while (contador <= 100){
//     total +=contador;
//     contador += 2;
//   }
//   cout << "Total sumatoria de pares menore que 100: " << total<<endl;  
// }`, `#include <iostream>
// using namespace std;

// int main() {

//   int contador = 1, total = 0;

//   while (contador <= 100){
//     total +=contador;
//     contador += 2;
//   }
//   cout << "Total sumatoria de impares menore que 100: " << total<<endl;  
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   int contador = 1;
//   double total= 1;
  
//   cout << "Calculo 16!" << endl;
  
//   while (contador <= 16){
//     total = contador * total;
    
//     contador++;
//   }

//   cout << total;
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   int valor;
  
//   cout << "Calcula la longitud de un numero"<< endl;
//   cout << "Ingrese el numero a calcular (entero): ";
//   cin >> valor;
  
//   cout << "The length of the txt string is: " << to_string(valor).length();
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   int contador = 2, n, suma = 0;

//   cout << "Ingrese el numero que quiere saber si es primo: ";
//   cin >> n;

//   while (contador < n) {
//     if (n % contador == 0) {
//       suma++;
//     }
//     contador++;
//   }

//   if (suma == 0){
//     cout << "es primo";
//   }
//   else{
//     cout << "El numero no es primo";
//   }
// }`, `#include <iostream>
// using namespace std;

// int main() {
//   cout << "Funcionamiento de las posiciones de un array" << endl;
//   cout << endl;

//   int array[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

//   cout << "Aqui vamos a mostrar los valores en cada posicion"<< endl;

//   cout << "Posicion 0: " << array[0] << endl;
//   cout << "Posicion 1: " << array[1] << endl;
//   cout << "Posicion 2: " << array[2] << endl;
//   cout << "Posicion 3: " << array[3] << endl;
//   cout << "Posicion 4: " << array[4] << endl;
//   cout << "Posicion 5: " << array[5] << endl;
//   cout << "Posicion 6: " << array[6] << endl;
//   cout << "Posicion 7: " << array[7] << endl;
//   cout << "Posicion 8: " << array[8] << endl;
//   cout << "Posicion 9: " << array[9] << endl;
  
//   return 0;
// }`, `#include <iostream>
// using namespace std;


// int main() {
//   int n;
  
//   cout << "Accediendo a los arrays por teclado" << endl;

//   cout << "Ingresa el tamaño del array: ";
//   cin >> n;

//   cout << endl;

//   int array[n];

//   for (int i = 0; i < n; i++) {
//     cout << "Ingrese el numero " << (i + 1) << ": ";
//     cin >> array[i];
//   }
//   cout << endl;
  
//   cout << "los datos ingresados en el array son: " << endl;
  
//   for (int i = 0; i < sizeof(array)/ sizeof(array[0]); i++) {
//     cout << "posicion " << i <<  " -> valor= " <<array[i] << endl;
//   }
// }`, `#include <iostream>
// using namespace std;

// void metodoBurbuja(int array[], int size) {
  
//   for (int i = 0; i < size; i++){
//     for(int j = 0; j < i ; j++){
//       if(array[i] < array [j]){
//         int temp = array[i];
//         array[i] = array[j];
//         array[j] = temp;
        
//       }
//     }
//   }
// }

// int main() {
//   cout << "ORGANIZACION POR METODO BURBUJA \n" << endl;

//   int array[10] = {12, 48, 65, 1, 69, 22, 76, 23, 43, 98};

//   cout << "Datos desordenados: " << endl;
//   for (int i = 0; i < sizeof(array) / sizeof(array[0]); i++) {
//     cout << "Dato " << i + 1 << ": " << array[i] << endl;
//   };

//   metodoBurbuja(array, 10);

//   cout << "\nDatos Ordenados por burbuja: " << endl;

//   for (int i = 0; i < sizeof(array) / sizeof(array[0]); i++) {
//     cout << array[i] << "  ";
//   };

//   return 0;
// }`, `#include <iostream>
// using namespace std;

// void metodoBurbuja(int array[], int size) {

//   for (int i = 0; i < size; i++){
//     for(int j = 0; j < i ; j++){
//       if(array[i] > array [j]){
//         int temp = array[i];
//         array[i] = array[j];
//         array[j] = temp;

//       }
//     }
//   }
// }

// int main() {
//   cout << "ORGANIZACION POR METODO BURBUJA \n" << endl;

//   int array[10] = {12, 48, 65, 1, 69, 22, 76, 23, 43, 98};

//   cout << "Datos desordenados: " << endl;
//   for (int i = 0; i < sizeof(array) / sizeof(array[0]); i++) {
//     cout << "Dato " << i + 1 << ": " << array[i] << endl;
//   };

//   metodoBurbuja(array, 10);

//   cout << "\nDatos Ordenados por burbuja: " << endl;

//   for (int i = 0; i < sizeof(array) / sizeof(array[0]); i++) {
//     cout << array[i] << "  ";
//   };

//   return 0;
// }`, `#include <iostream>
// using namespace std;

// int sumatoriaElementos(int arr[] , int size){
//   int total = 0;
  
//   for(int i = 0; i < size; i++){
//     total += arr[i];
//   }
//   return total;
// }


// int main() {
//   int array[] = {1, 2, 4, 5, 6, 7, 8, 9, 10};

//   int size = sizeof(array) / sizeof(array[0]);
  
//   cout << "SUMATORIA DE LOS ELEMENTOS DE UN ARRAY" << endl;
//   cout << "--------------------------------------" << endl;

//   cout << "Elementos array: ";
  
//   for(int i = 0; i < size; i++){
//     cout << array[i] << " ";
//   }

//   int suma = sumatoriaElementos(array, size);

//   cout << "\n--------------------------------------" << endl;
//   cout << "Sumatoria: " << suma << endl;

//   return 0;
// }`, `#include <iostream>
// using namespace std;

// int sumatoriaElementos(int arr[] , int size){
//   int total = 1;

//   for(int i = 0; i < size; i++){
//     total *= arr[i];
//   }
//   return total;
// }


// int main() {
//   int array[] = {1, 2, 4, 5, 6, 7, 8, 9, 10};

//   int size = sizeof(array) / sizeof(array[0]);

//   cout << "SUMATORIA DE LOS ELEMENTOS DE UN ARRAY" << endl;
//   cout << "--------------------------------------" << endl;

//   cout << "Elementos array: ";

//   for(int i = 0; i < size; i++){
//     cout << array[i] << " ";
//   }

//   int suma = sumatoriaElementos(array, size);

//   cout << "\n--------------------------------------" << endl;
//   cout << "Sumatoria: " << suma << endl;

//   return 0;
// }`, `#include <cmath>
// #include <iostream>
// using namespace std;

// double encontrarMayor(int array[], int size) {
//   double mayor = -INFINITY;
//   for (int i = 0; i < size; i++) {
//     if (array[i] > mayor) {
//       mayor = array[i];
//     }
//   }

//   return mayor;
// }

// double encontrarMenor(int array[], int size) {
//   double menor = INFINITY;
//   for (int i = 0; i < size; i++) {
//     if (array[i] < menor) {
//         menor = array[i];
//     }
//   }

//   return menor;
// }

// int main() {
//   cout << "Encontrar el mayor y el menor de un array de enteros" << endl;

//   int array[] = {10, 20, 30, 40, 50, 60, 70, 80};

//   int size = sizeof(array) / sizeof(array[0]);

//   cout << "\nElementos del array: ";

//   for (int i = 0; i < size ; i++) {
//     cout << array[i] << " ";
//   }

//   double numeroMayor = encontrarMayor(array, size);
//   double numeroMenor = encontrarMenor(array, size); 

//   cout << "\n\nMayor valor del array: " << numeroMayor << endl;
//   cout << "Menor valor del array: " << numeroMenor << endl;
// }`, `#include <iostream>
// #include <vector>

// using namespace std;
// //el uso del símbolo &  es necesario cuando pasas un vector por referencia a una función en C++
// //Al usar &, estás pasando una referencia al vector original en lugar de hacer una copia del vector.
// //Esto permite que la función modifique directamente el vector original en lugar de operar en una copia local.
// void findEvenNumbers(int array[], vector<int>& evenNumbers, int size) {
//   for(int i = 0; i < size ; i++){
//     if(array[i] % 2 == 0){
//       evenNumbers.push_back(array[i]);
//     }
//   }
  
// }

// void findOddNumbers(int array[], vector<int>& oddNumbers, int size) {
//   for(int i = 0; i < size ; i++){
//     if(array[i] % 2 != 0){
//         oddNumbers.push_back(array[i]);
//     }
//   }

// }

// int main() {
//   int array[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
//   vector<int> evenNumbers;
//   vector<int> oddNumbers;

//   cout << "Encontrando los numeros pares y impares de un arreglo" << endl;

//   cout << endl << "Valores del array: ";

//   int size = sizeof(array) / sizeof(array[0]);

//   for (int i = 0; i < size; i++) {
//     cout << array[i] << " ";
//   }

//   findEvenNumbers(array, evenNumbers, size);
//   findOddNumbers(array, oddNumbers, size);

//   cout << "\n\nValores pares del array: " ;
//   for(int i = 0; i < evenNumbers.size(); i++){
//     cout << evenNumbers[i] << " ";
//   }
  
//   cout << "\n\nValores impares del array: " ;
//   for(int i = 0; i < oddNumbers.size(); i++){
//     cout << oddNumbers[i] << " ";
//   }
// }`, `#include <iostream>
// #include <vector>

// using namespace std;

// // Función para eliminar elementos duplicados de un vector
// void removeDuplicates(vector<int> &vec) {
//   vector<int> newVector;  // Vector temporal para almacenar elementos únicos

//   for (int i = 0; i < vec.size(); i++) {
//     bool esDuplicado = false;
//     for (int j = 0; j < i; j++) {
//       if (vec[i] == vec[j]) {
//         esDuplicado = true;
//       }
//     }
//     if (esDuplicado == false) {
//         newVector.push_back(vec[i]);
//     }
//   }

//   vec = newVector;  // Actualizar el vector original con elementos únicos
// }

// int main() {
//     vector<int> repeatVector = {1, 2, 3, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 9, 10};

//     cout << "Eliminar elementos duplicados de un array o vector";

//     cout << "\n\nVector original: ";
//     for (int i = 0; i < repeatVector.size(); i++) {
//       cout << repeatVector[i] << " ";
//     }

//     removeDuplicates(repeatVector);  

//     cout << "\n\nVector sin duplicados: ";
//     for (int i = 0; i < repeatVector.size(); i++) {
//         cout << repeatVector[i] << " ";
//     }

//     return 0;
// }`, `#include <iostream>
// using namespace std;

// void reverseArray(int arr[], int newArr[], int size) {
//   int temp = size - 1;
//   for (int i = 0; i < size; i++) {
//     newArr[i] = arr[temp];
//     temp--;
//   }
// }

// int main() {
//   cout << "Inversion de un arreglo" << endl;

//   int array[] = {1, 2, 3, 4, 5};
//   int size = sizeof(array) / sizeof(array[0]);
//   int inverseArray[size];

//   cout << "Arreglo original: ";
//   for (int i = 0; i < size; i++) {
//     cout << array[i] << " ";
//   }

//   reverseArray(array, inverseArray, size);

//   cout << "\nArreglo invertido: ";

//   for (int i = 0; i < size; i++) {
//     cout << inverseArray[i] << " ";
//   }

//   return 0;
// }`, `#include <iostream>
// #include <vector>

// using namespace std;

// void removeDuplicates(vector<int> &vec) {
//   vector<int> newVector;  // Vector temporal para almacenar elementos únicos

//   for (int i = 0; i < vec.size(); i++) {
//     bool esDuplicado = false;
//     for (int j = 0; j < i; j++) {
//       if (vec[i] == vec[j]) {
//         esDuplicado = true;
//       }
//     }
//     if (esDuplicado == false) {
//         newVector.push_back(vec[i]);
//     }
//   }

//   vec = newVector;  // Actualizar el vector original con elementos únicos
// }

// void concatenateArrays(int array1[], int array2[], int size1, int size2, int newArray[]) {
//   for(int i = 0; i < size1 ; i++){
//      newArray[i] = array1[i];
//   }
  
//   for(int i = 0; i < size2 ; i++){
//      newArray[size1+i] = array2[i];
//   }
// }

// int main() {
//   cout << "Uniendo dos arrays" << endl;

//   int arr1[] = {1,2,2,3,4,5,5};
//   int size1 = sizeof(arr1)/sizeof(arr1[0]);

//   cout << "Array 1: ";
//   for(int i = 0; i < size1; i++){
//     cout << arr1[i] << " ";
//   }

//   int arr2[] = {6,6,6,7,8,9,9,10};
//   int size2 = sizeof(arr2)/sizeof(arr2[0]);
  
//   cout << "\nArray 2: ";
//   for(int i = 0; i < size2; i++){
//     cout << arr2[i] << " ";
//   }

//   int newArray[size1 + size2];
//   concatenateArrays(arr1, arr2, size1, size2, newArray);

//   cout << "\n\nNuevo array unido: ";

//   for(int i = 0; i < size1 + size2; i++){
//     cout << newArray[i] << " ";
//   }

//   vector<int> newVector(newArray, newArray + (size1+ size2));

//   removeDuplicates(newVector);
  
//   cout << "\n\nNuevo array sin duplicados: ";

//   for(int i = 0 ; i < newVector.size(); i++){
//     cout << newVector[i] << " ";
//   }
  
// }`]
// const corte2 = document.getElementById("corte2");
// const titleP2 = document.getElementById('titleP2');


// //CORTE 3
// const enunciadosP3 = [
//   "suma los elementos de la diagonal principal", "suma los elementos de la diagonal secundaria", "Suma de los elementos de cada fila", "Sume los elementos de cada columna", "Suma de los elementos sobre la diagonal principal y bajo la diagonal secundaria", "Realizar la resta de dos matrices A y B de igual tamaño y guardar el resultado en una matriz C", "matriz transpuesta", "matriz por un escalar", "Dadas dos matrices A y B de dimensiones (m x n) y (n x p), respectivamente, calcula el producto de matrices A * B. Proporciona el resultado en términos de una nueva matriz C.", "Matriz Inversa: Dada una matriz cuadrada A (n x n), encuentra su matriz inversa si existe. Si no es inversible, explica por qué. Muestra el cálculo detallado y proporciona la matriz inversa si es posible.", "Dada una matriz cuadrada A (n x n), calcula su determinante y encuentra el cofactor de un elemento específico de la matriz. Proporciona el valor del determinante y el cofactor", "Dada una matriz cuadrada A (n x n), realiza dos operaciones: Encuentra la matriz traspuesta de A, Calcula la multiplicación de A por su propia traspuesta (A * A^T) y muestra el resultado.", "Dadas tres matrices A (m x n), B (m x n), y C (m x n), y un escalar k, realiza las siguientes operaciones: A:Calcula k * A y muestra el resultado, B:Calcula A + B y muestra el resultado, C:Calcula B + C y muestra el resultado"
// ]
// const codigoP3 = [`#include <iostream>
// using namespace std;

// int main() {
//   int total = 0;
//   int matriz[5][5]={{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}}; 

//   cout << "Sumatoria de la diagonal principal de una matriz" << endl;
  
//   cout << "Matriz utilizada: \n" << endl;
//   for(int i = 0; i < 5 ; i++){
//     for(int j = 0; j <5; j++){
//       cout << matriz[i][j] << " ";
//       if(i == j){
//         total += matriz[i][j];
//       }
//     }
//     cout << endl;
//   }
  
//   cout << "\nTotal: " << total <<endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int total = 0;
//   int matriz[5][5]={{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}}; 

//   cout << "Sumatoria de la diagonal secundaria de una matriz" << endl;

//   cout << "Matriz utilizada: \n" << endl;
//   for(int i = 1; i <= 5 ; i++){
//     for(int j = 1; j <= 5; j++){
//       cout << matriz[i-1][j-1] << " ";
//       if(i + j == 6){
//         total += matriz[i-1][j-1];
//       }
//     }
//     cout << endl;
//   }

//   cout << "\nTotal: " << total <<endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int fila1 = 0;
//   int fila2 = 0;
//   int fila3 = 0;
//   int fila4 = 0;
//   int fila5 = 0;

//   int matriz[5][5]={{1,1,1,1,1},{2,2,2,2,2},{3,3,3,3,3},{4,4,4,4,4},{5,5,5,5,5}}; 

//   cout << "Sumatoria de la diagonal principal de una matriz" << endl;

//   cout << "Matriz utilizada: \n" << endl;
//   for(int i = 0; i < 5 ; i++){
//     for(int j = 0; j < 5; j++){
//       cout << matriz[i][j] << " ";
//         switch (i){
//           case 0:
//             fila1 += matriz[i][j];
//             break;
//           case 1:
//             fila2 += matriz[i][j];
//             break;
//           case 2:
//             fila3 += matriz[i][j];
//             break;
//           case 3:
//             fila4 += matriz[i][j];
//             break;
//           case 4:
//             fila5 += matriz[i][j];
//             break;
//         }
//     }
//     cout << endl;
//   }
//   cout << "\nTotal fila1: " << fila1 <<endl;
//   cout << "\nTotal fila2: " << fila2 <<endl;
//   cout << "\nTotal fila3: " << fila3 <<endl;
//   cout << "\nTotal fila4: " << fila4 <<endl;
//   cout << "\nTotal fila5: " << fila5 <<endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int col1 = 0;
//   int col2 = 0;
//   int col3 = 0;
//   int col4 = 0;
//   int col5 = 0;

//   int matriz[5][5]={{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}}; 

//   cout << "Sumatoria de la diagonal principal de una matriz" << endl;

//   cout << "Matriz utilizada: \n" << endl;
//   for(int i = 0; i < 5 ; i++){
//     for(int j = 0; j < 5; j++){
//       cout << matriz[i][j] << " ";
//         switch (j){
//           case 0:
//             col1 += matriz[i][j];
//             break;
//           case 1:
//             col2 += matriz[i][j];
//             break;
//           case 2:
//             col3 += matriz[i][j];
//             break;
//           case 3:
//             col4 += matriz[i][j];
//             break;
//           case 4:
//             col5 += matriz[i][j];
//             break;
//         }
//     }
//     cout << endl;
//   }
//   cout << "\nTotal fila1: " << col1 <<endl;
//   cout << "\nTotal fila2: " << col2 <<endl;
//   cout << "\nTotal fila3: " << col3 <<endl;
//   cout << "\nTotal fila4: " << col4 <<endl;
//   cout << "\nTotal fila5: " << col5 <<endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int matriz[5][5]={{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}}; 

//   int diagonalPrin = 0;
//   int diagonalSec = 0;

//   for (int i = 0; i < 5; i++) {
//       for (int j = 0; j < 5; j++) {
//         cout << matriz[i][j] << " ";
//         if (i == j) {
//           diagonalPrin += matriz[i][j];
//         }
//       }
//     cout << endl;
//   }
//   for (int i = 1; i <= 5; i++) {
//       for (int j = 1; j <= 5; j++) {
//         if (i + j == 6) {
//           diagonalSec += matriz[i-1][j-1];
//         }
//       }
//     cout << endl;
//   }

//   int posA = (sizeof(matriz) / sizeof(matriz[0])-1)/2;
//   int posB = (sizeof(matriz[0]) / sizeof(matriz[0][0])-1)/2;

//   cout << "La suma de los elementos sobre la diagonal principal es: " << diagonalPrin << endl;
//   cout << "La suma de los elementos bajo la diagonal secundaria es: " << diagonalSec << endl;
//   cout << "La suma total de ambas áreas es: " << diagonalPrin + diagonalSec - matriz[posA][posB] << endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int matrizA[4][4] = {{1,2,3,4},{2,3,4,5},{3,4,5,6},{4,5,6,7}};
//   int matrizB[4][4] = {{5,6,7,8},{6,7,8,9},{7,8,9,10},{8,9,10,11}};
//   int matrizC[4][4];

//   cout << "Matriz A" << endl;
//   for(int i = 0; i < 4 ; i++){
//     for( int j = 0; j < 4; j++){
//       cout << matrizA[i][j] << "  ";
//     }
//     cout << endl;
//   }

//   cout << "\nMatriz B" << endl;
//   for(int i = 0; i < 4 ; i++){
//     for( int j = 0; j < 4; j++){
//       cout << matrizB[i][j] << "  ";
//     }
//     cout << endl;
//   }

//   cout << "\nResta de la matriz A a la matriz B: " << endl;
//   for(int i = 0; i < 4 ; i++){
//     for( int j = 0; j < 4; j++){
//       matrizC[i][j] = matrizA[i][j] - matrizB[i][j];
//       cout << matrizC[i][j] << "  "; 
//     }
//     cout << endl;
//   }
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int matriz[7][4] = {{1,2,3,4},{2,6,3,9},{8,9,3,6},{3,7,8,9},{1,6,2,7},{5,8,6,7},{1,2,5,6}};
//   int filas = sizeof(matriz) / sizeof(matriz[0]);
//   int columnas = sizeof(matriz[0]) / sizeof(matriz[0][0]);

//   cout << "matriz original"<< endl;
//   for(int i = 0; i < filas; i++){
//     for(int j = 0; j < columnas ; j++){
//       cout << matriz[i][j] << " ";
//     }
//     cout << endl;
//   }

//   cout <<endl <<  "matriz transpuesta"<< endl;

//   int newMatriz[columnas][filas];
//   for(int i = 0; i < columnas ; i++){
//     for(int j = 0; j < filas ; j++){
//       newMatriz[i][j] = matriz[j][i];
//       cout << newMatriz[i][j] << " ";
//     }
//     cout << endl;
//   }
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int matriz[5][5] = {{1,2,3,4,5},{6,7,8,9,10},{1,6,2,7,3},{3,6,4,0},{3,6,8,1,2}};

//   cout << "Matriz original" << endl;

//   for (int i = 0; i < 5; i++){
//     for (int j = 0; j < 5; j++){
//       cout << matriz[i][j] << " ";
//     }
//     cout << endl;
//   }

//   cout << "\nMatriz por el escalar 2" << endl;
//   for (int i = 0; i < 5; i++){
//     for(int j = 0; j < 5; j++){
//       matriz[i][j] = matriz[i][j] * 2;
//       cout << matriz[i][j] << " "; 
//     }
//     cout << endl;
//   }
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int A; // filas A
//   int B; // columnas A
//   int C; // Columnas B

//   srand(static_cast<unsigned>(time(0)));

//   do {
//     cout << "MULTIPLICAION DE MATRICES" << endl;
//     cout << "Los valores de los datos iran desde 1 hasta 30" << endl;

//     cout << "Ingresa el número de filas de la matriz A: ";
//     cin >> A;

//     cout << "Ingresa el número de columnas de la matriz A: ";
//     cin >> B;

//     cout << "Ingresa el número de columnas de la matriz B: ";
//     cin >> C;
//     cout << endl;
//   } while (B != C);

//   int matA[A][B];
//   int matB[B][C];
//   int matC[A][C];

//   cout << "Matriz A" << endl;
//   for (int i = 0; i < A; i++) {
//     for (int j = 0; j < B; j++) {
//       matA[i][j] = rand() % (30 - 1 + 1);
//       cout << matA[i][j] << " ";
//     }
//     cout << endl;
//   }

//   cout << endl;
  
//   cout << "Matriz B" << endl;
//   for (int i = 0; i < B; i++) {
//     for (int j = 0; j < C; j++) {
//       matB[i][j] = rand() % (30 - 1 + 1);
//       cout << matB[i][j] << " ";
//     }
//     cout << endl;
//   }

//   cout << endl;
//   cout << "Matriz C" << endl;

//     for (int i = 0; i < B; i++) { 
//         for (int j = 0; j < C; j++) { 
//           matC[i][j] = 0; 
//           for (int k = 0; k < B; k++) { 
//             matC[i][j] += matA[i][k] * matB[k][j];  
//           } 
//     cout << matC[i][j] << " "; 
//         } 
//         cout <<  endl; 
//       } 
// }
// `, `#include <cmath>
// #include <iostream>
// #include <vector>

// using namespace std;

// // Función para imprimir una matriz
// void imprimirMatriz(const std::vector<std::vector<double>>& matriz) {
//     for (const auto& fila : matriz) {
//         for (double elemento : fila) {
//             cout << elemento << " ";
//         }
//         cout << endl;
//     }
// }

// // Función para calcular el determinante de una matriz mediante eliminación gaussiana
// double determinanteMatriz(const std::vector<std::vector<double>>& matriz) {
//     int n = matriz.size();
//     std::vector<std::vector<double>> temp(matriz);

//     for (int i = 0; i < n; ++i) {
//         for (int j = i + 1; j < n; ++j) {
//             double factor = temp[j][i] / temp[i][i];
//             for (int k = i; k < n; ++k) {
//                 temp[j][k] -= factor * temp[i][k];
//             }
//         }
//     }

//     double resultado = 1.0;
//     for (int i = 0; i < n; ++i) {
//         resultado *= temp[i][i];
//     }

//     return resultado;
// }

// // Función para calcular la inversa de una matriz mediante eliminación gaussiana
// std::vector<std::vector<double>> matrizInversa(const std::vector<std::vector<double>>& matriz) {
//     int n = matriz.size();

//     // Crear una matriz ampliada [matriz | Identidad]
//     std::vector<std::vector<double>> ampliada(n, std::vector<double>(2 * n, 0.0));
//     for (int i = 0; i < n; ++i) {
//         for (int j = 0; j < n; ++j) {
//             ampliada[i][j] = matriz[i][j];
//             // Inicializar la parte derecha con la matriz identidad
//             ampliada[i][j + n] = (i == j) ? 1.0 : 0.0;
//         }
//     }

//     // Aplicar eliminación gaussiana para triangular la parte izquierda
//     for (int i = 0; i < n; ++i) {
//         // Normalizar la fila actual
//         double pivot = ampliada[i][i];
//         for (int j = 0; j < 2 * n; ++j) {
//             ampliada[i][j] /= pivot;
//         }

//         // Eliminar otras filas
//         for (int k = 0; k < n; ++k) {
//             if (k != i) {
//                 double factor = ampliada[k][i];
//                 for (int j = 0; j < 2 * n; ++j) {
//                     ampliada[k][j] -= factor * ampliada[i][j];
//                 }
//             }
//         }
//     }

//     // Extraer la parte derecha de la matriz ampliada como la inversa
//     std::vector<std::vector<double>> inversa(n, std::vector<double>(n, 0.0));
//     for (int i = 0; i < n; ++i) {
//         for (int j = 0; j < n; ++j) {
//             inversa[i][j] = ampliada[i][j + n];
//         }
//     }

//     return inversa;
// }

// int main() {
//     int size;
//     cout << "CALCULADORA DE MATRIZ INVERSA" << endl;
//     cout << "Ingrese el tamaño de la matriz (será una matriz cuadrada): ";
//     cin >> size;

//     vector<vector<double>> matriz(size, vector<double>(size));
//     srand(static_cast<unsigned>(time(0)));

//     cout << "Matriz generada: " << endl;
//     for (int i = 0; i < size; i++) {
//         for (int j = 0; j < size; j++) {
//             matriz[i][j] = rand() % (20 - 1 + 1) + 1;
//             cout << matriz[i][j] << " ";
//         }
//         cout << endl;
//     }

//     double determinante = determinanteMatriz(matriz);
//     if (determinante != 0) {
//         cout << "El determinante es " << determinante << ", por lo que tiene inversa." << endl;

//         // Calcular e imprimir la matriz inversa
//         std::vector<std::vector<double>> inversa = matrizInversa(matriz);
//         cout << "Matriz inversa:" << endl;
//         imprimirMatriz(inversa);
//     } else {
//         cout << "El determinante es 0, por lo que no hay inversa." << endl;
//     }

//     return 0;
// }


// `, `#include <iostream>
// #include <vector>

// using namespace std;

// // Función para imprimir una matriz
// void imprimirMatriz(const std::vector<std::vector<double>>& matriz) {
//     for (const auto& fila : matriz) {
//         for (double elemento : fila) {
//             cout << elemento << " ";
//         }
//         cout << endl;
//     }
// }

// // Función para calcular el determinante de una matriz mediante eliminación gaussiana
// double determinanteMatriz(const std::vector<std::vector<double>>& matriz) {
//     int n = matriz.size();
//     std::vector<std::vector<double>> temp(matriz);

//     for (int i = 0; i < n; ++i) {
//         for (int j = i + 1; j < n; ++j) {
//             double factor = temp[j][i] / temp[i][i];
//             for (int k = i; k < n; ++k) {
//                 temp[j][k] -= factor * temp[i][k];
//             }
//         }
//     }

//     double resultado = 1.0;
//     for (int i = 0; i < n; ++i) {
//         resultado *= temp[i][i];
//     }

//     return resultado;
// }

// // Función para calcular la matriz cofactora
// std::vector<std::vector<double>> matrizCofactora(const std::vector<std::vector<double>>& matriz, int fila, int columna) {
//     int n = matriz.size();
//     std::vector<std::vector<double>> cofactor(n - 1, std::vector<double>(n - 1, 0.0));

//     for (int i = 0, ci = 0; i < n; ++i) {
//         if (i == fila) continue;  // Saltar la fila actual
//         for (int j = 0, cj = 0; j < n; ++j) {
//             if (j == columna) continue;  // Saltar la columna actual
//             cofactor[ci][cj] = matriz[i][j];
//             ++cj;
//         }
//         ++ci;
//     }

//     return cofactor;
// }

// int main() {
//     int size;
//     cout << "CALCULADORA DE DETERMINANTE Y COFACTOR" << endl;
//     cout << "Ingrese el tamaño de la matriz (será una matriz cuadrada): ";
//     cin >> size;

//     vector<vector<double>> matriz(size, vector<double>(size));
//     srand(static_cast<unsigned>(time(0)));

//     cout << "Matriz generada: " << endl;
//     for (int i = 0; i < size; i++) {
//         for (int j = 0; j < size; j++) {
//             matriz[i][j] = rand() % (20 - 1 + 1) + 1;
//             cout << matriz[i][j] << " ";
//         }
//         cout << endl;
//     }

//     double determinante = determinanteMatriz(matriz);
//     cout << "El determinante de la matriz es: " << determinante << endl;

//     // Seleccionar un elemento específico (fila, columna) para calcular su cofactor
//     int filaElegida, columnaElegida;
//     cout << "Ingrese la fila del elemento para calcular el cofactor: ";
//     cin >> filaElegida;
//     cout << "Ingrese la columna del elemento para calcular el cofactor: ";
//     cin >> columnaElegida;

//     // Verificar que la fila y la columna estén dentro de los límites de la matriz
//     if (filaElegida >= 0 && filaElegida < size && columnaElegida >= 0 && columnaElegida < size) {
//         // Calcular el cofactor
//         std::vector<std::vector<double>> cofactor = matrizCofactora(matriz, filaElegida, columnaElegida);

//         cout << "Matriz cofactora para el elemento en la fila " << filaElegida << " y columna " << columnaElegida << ":" << endl;
//         imprimirMatriz(cofactor);
//     } else {
//         cout << "La fila y la columna ingresadas están fuera de los límites de la matriz." << endl;
//     }

//     return 0;
// }
// `, `#include <iostream>
// #include <vector>

// using namespace std;

// // Función para imprimir una matriz
// void imprimirMatriz(const std::vector<std::vector<double>>& matriz) {
//     for (const auto& fila : matriz) {
//         for (double elemento : fila) {
//             cout << elemento << " ";
//         }
//         cout << endl;
//     }
// }

// // Función para calcular la matriz traspuesta
// vector<vector<double>> matrizTraspuesta(const vector<vector<double>>& matriz) {
//     int filas = matriz.size();
//     int columnas = matriz[0].size();

//     vector<std::vector<double>> traspuesta(columnas, vector<double>(filas, 0.0));

//     for (int i = 0; i < filas; ++i) {
//         for (int j = 0; j < columnas; ++j) {
//             traspuesta[j][i] = matriz[i][j];
//         }
//     }

//     return traspuesta;
// }

// // Función para calcular la multiplicación de una matriz por su traspuesta
// vector<vector<double>> multiplicarPorTraspuesta(const vector<vector<double>>& matriz) {
//     int n = matriz.size();
//     vector<vector<double>> resultado(n, vector<double>(n, 0.0));

//     for (int i = 0; i < n; ++i) {
//         for (int j = 0; j < n; ++j) {
//             for (int k = 0; k < n; ++k) {
//                 resultado[i][j] += matriz[i][k] * matriz[j][k];
//             }
//         }
//     }

//     return resultado;
// }

// int main() {
//     int size;
//     cout << "OPERACIONES CON MATRICES" << endl;
//     cout << "Ingrese el tamaño de la matriz cuadrada A (n x n): ";
//     cin >> size;

//     vector<vector<double>> matrizA(size, vector<double>(size));
//     srand(static_cast<unsigned>(time(0)));

//     cout << "Matriz A generada: " << endl;
//     for (int i = 0; i < size; i++) {
//         for (int j = 0; j < size; j++) {
//             matrizA[i][j] = rand() % (20 - 1 + 1) + 1;
//             cout << matrizA[i][j] << " ";
//         }
//         cout << endl;
//     }

//     // a. Encontrar la matriz traspuesta de A
//     vector<vector<double>> traspuestaA = matrizTraspuesta(matrizA);

//     cout << "Matriz traspuesta de A:" << endl;
//     imprimirMatriz(traspuestaA);

//     // b. Calcular la multiplicación de A por su propia traspuesta (A * A^T)
//     std::vector<std::vector<double>> multiplicacionAAT = multiplicarPorTraspuesta(matrizA);

//     cout << "Multiplicación de A por su propia traspuesta (A * A^T):" << endl;
//     imprimirMatriz(multiplicacionAAT);

//     return 0;
// }
// `, `#include <iostream>
// #include <vector>

// using namespace std;

// // Función para imprimir una matriz
// void imprimirMatriz(const vector<vector<double>>& matriz) {
//     for (const auto& fila : matriz) {
//         for (double elemento : fila) {
//             cout << elemento << " ";
//         }
//         cout << endl;
//     }
// }

// // Función para calcular k * A
// vector<vector<double>> escalarPorMatriz(double k, const vector<vector<double>>& matriz) {
//     int filas = matriz.size();
//     int columnas = matriz[0].size();

//     vector<vector<double>> resultado(filas, vector<double>(columnas, 0.0));

//     for (int i = 0; i < filas; ++i) {
//         for (int j = 0; j < columnas; ++j) {
//             resultado[i][j] = k * matriz[i][j];
//         }
//     }

//     return resultado;
// }

// // Función para calcular A + B
// vector<vector<double>> sumaDeMatrices(const vector<vector<double>>& matrizA, const vector<vector<double>>& matrizB) {
//     int filas = matrizA.size();
//     int columnas = matrizA[0].size();

//     vector<vector<double>> resultado(filas, vector<double>(columnas, 0.0));

//     for (int i = 0; i < filas; ++i) {
//         for (int j = 0; j < columnas; ++j) {
//             resultado[i][j] = matrizA[i][j] + matrizB[i][j];
//         }
//     }

//     return resultado;
// }

// int main() {
//     int m, n;
//     cout << "Ingrese el número de filas (m): ";
//     cin >> m;
//     cout << "Ingrese el número de columnas (n): ";
//     cin >> n;

//     vector<vector<double>> matrizA(m, vector<double>(n));
//     vector<vector<double>> matrizB(m, vector<double>(n));
//     vector<vector<double>> matrizC(m, vector<double>(n));

//     cout << "Ingrese los elementos de la matriz A:" << endl;
//     for (int i = 0; i < m; i++) {
//         for (int j = 0; j < n; j++) {
//             cout << "A[" << i << "][" << j << "]: ";
//             cin >> matrizA[i][j];
//         }
//     }

//     cout << "Ingrese los elementos de la matriz B:" << endl;
//     for (int i = 0; i < m; i++) {
//         for (int j = 0; j < n; j++) {
//             cout << "B[" << i << "][" << j << "]: ";
//             cin >> matrizB[i][j];
//         }
//     }

//     cout << "Ingrese los elementos de la matriz C:" << endl;
//     for (int i = 0; i < m; i++) {
//         for (int j = 0; j < n; j++) {
//             cout << "C[" << i << "][" << j << "]: ";
//             cin >> matrizC[i][j];
//         }
//     }

//     double k;
//     cout << "Ingrese el escalar k: ";
//     cin >> k;

//     // a. Calcular k * A y mostrar el resultado
//     vector<vector<double>> resultadoA = escalarPorMatriz(k, matrizA);
//     cout << "k * A:" << endl;
//     imprimirMatriz(resultadoA);

//     // b. Calcular A + B y mostrar el resultado
//     vector<vector<double>> resultadoSumaAB = sumaDeMatrices(matrizA, matrizB);
//     cout << "A + B:" << endl;
//     imprimirMatriz(resultadoSumaAB);

//     // c. Calcular B + C y mostrar el resultado
//     vector<vector<double>> resultadoSumaBC = sumaDeMatrices(matrizB, matrizC);
//     cout << "B + C:" << endl;
//     imprimirMatriz(resultadoSumaBC);

//     return 0;
// }
// `]
// const corte3 = document.getElementById("corte3");
// const titleP3 = document.getElementById('titleP3');


// //PARCIAL 1

// const enunciadosParcial1 = [
//   "A partir de los siguientes datos ingresados por teclado construya un programa para calcular", "A partir de los siguientes datos ingresados en código construya un programa para calcular el área y el volumen máximo de un cono circular truncado o tronco de cono circular recto", "El efecto doppler", "4.	Construya un programa que me calcule teniendo en cuenta dos cajas de 10 y 15 kg de masa respectivamente que se encuentran apoyadas sobre una superficie horizontal sin rozamiento, una apoyada en la otra. Si se empuja el conjunto con una fuerza de 55 N. ¿Cuál es la aceleración de cada masa?¿Qué fuerza ejercerá cada caja sobre la otra?", "Diseña un programa que solicite a un usuario su peso, altura, edad y nivel de actividad física. Luego, calcula y muestra el consumo calórico diario recomendado para mantener su peso actual teniendo en cuenta el siguiente gráfico:", "desarrolle un programa que permita al médico calcular y al usuario llevar control de su índice de masa corporal, el cálculo viene dado a partir del peso y la estatura de la siguiente manera", "Una versión mejorada del índice de masa corporal es la variación del peso cuando una mujer se encuentra en estado de gestación, ésta viene dada por algunas alteraciones en el programa anterior."
// ]
// const detailsParcial1 = [
//   `<img src="../img/parcial1/imagen1.png">`, `<img src="../img/parcial1/imagen2.png">`, `<img src="../img/parcial1/imagen3.png"><p>De acuerdo a la siguiente ilustración, simule el escenario en el que: El emisor se acerca al receptor, El emisor se aleja del receptor, Los dos se mueven hacia el mismo lado, Los dos se mueven en sentido contrario</p>`, `<img src="../img/parcial1/imagen4.png">`, `<img src="../img/parcial1/imagen5.png">`, `<img src="../img/parcial1/imagen6.png">`, `<img src="../img/parcial1/imagen7.png">`
// ]
// const codigoParcial1 = [`#include <iostream>
// #include <math.h>

// using namespace std;

// int main() {

//   /*
//   Variables
//       areaL = Area lateral del cilindro
//       areaB = Area bases del cilindro
//   */
//   int option;
//   double a, b, areaL, areaB, areaTotal, res;
//   const double pi = 3.1416;

//   cout << "_______________" << endl;
//   cout << "   CILINDRO"<<endl;
//   cout << "_______________"<<endl;
//   cout << "Seleccione la opcion deseada" << endl;
//   cout << "1. calcular el volumen y area total del cilindro" << endl;
//   cout << "2. hallar el radio del cilindo" << endl;
//   cout << "3. hallar la altura del cilindro" << endl;
//   cin >> option;

//   if (option == 1) {
//     cout << "Ingrese el radio del cilindro: ";
//     cin >> a; /*radio = a*/

//     cout << "Ingrese la altura del cilindro: ";
//     cin >> b; /*altura = b*/

//     areaL = 2 * pi * a * b;
//     areaB = 2 * pi * (a * a);
//     areaTotal = areaL + areaB;
//     res = pi * (a * a) * b; /*res = volumen*/

//     cout << "El volumen del cilindro es de: " << res << " cm^3" << endl;
//     cout << "El area de la superficie lateral es de: " << areaL << endl;
//     cout << " y el area de sus bases es de: " << areaB
//          << ". Es decir su area total es de " << areaTotal << " cm^2";

//   } else if (option == 2) {
//     cout << "Ingrese el volumen del cilindro: ";
//     cin >> a; /*volumen = a*/

//     cout << "Ingrese la altura del cilindro: ";
//     cin >> b; /*altura = b*/

//     res = sqrt(a / (pi * b));

//     cout << "El radio del cilindro es de: " << res << "cm";

//   } else if (option == 3) {
//     cout << "Ingrese el volumen del cilindro: ";
//     cin >> a; /*volumen = a*/

//     cout << "Ingrese el radio del cilindro: ";
//     cin >> b; /*radio = b*/

//     res = a / (pi * (b * b));

//     cout << "La altura del cilindro es de: " << res << "cm";
//   } else {
//     cout << "Valor ingresado no valido";
//   }

//   return 0;
// }
// ` , `#include <iostream>
// #include <math.h>

// using std::cin;
// using std::cout;

// int main()
// {
//     int option;
//     double r1, r2, r12, r22, a, h, angulo, area, volumen;
//     const double pi = 3.1416;

//     cout<< "_____________________________________________\n";
//     cout<< "CALCULAR AREA Y VOLUMEN DE UN TRONCO DE CONO\n";
//     cout<< "_____________________________________________\n";

//     cout<<"Desea utilizar un cono:\n1.truncado\n2.recto\n";
//     cout<<"eleccion: ";
//     cin >> option;

//     if(option == 1){
//         cout <<"Ingrese r1 (radio inferior): ";
//         cin >> r1;

//         cout <<"Ingrese r2 (radio superior): ";
//         cin >> r2;

//         cout <<"Ingrese la altura del cono: ";
//         cin >> h;

//         a= sqrt((h*h) + (r1-r2)*(r1-r2));
//         r12 = r1*r1;
//         r22 = r2*r2;

//         area = pi*(r12 + r22+ a*(r1+r2));
//         volumen = ((h*pi)/3)*(r12 + r22 + r1 * r2);
//     }
//     else if(option ==2){
//         cout <<"Ingrese r (radio): ";
//         cin >> r1;

//         cout <<"Ingrese la altura del cono: ";
//         cin >> h;

//         a = sqrt((h*h) + (r1*r1));

//         area = pi*r1*(r1+a);
//         volumen = (pi*h*(r1*r1))/(3);
//     }else{
//         cout<<"Valor ingresado no valido";
//     }

//     cout<<"El area del cono es de: " << area << "cm^2\n";
//     cout<<"El volumen del cono es de: " << volumen << "cm^3";

//     return 0;
// }
// `, `#include <iostream>

// using namespace std;

// int main()
// {
//     /* Declaracion de variables */
//     double fo, fs, v, vs, vo;
//     v = 340;

//     int option;
//     /* Inicio del programa */

//     cout << "╔══════════════════════════════╗\n"; 
//     cout << "║ SIMULADOR DEL EFECTO DOOPLER ║\n"; 
//     cout << "╚══════════════════════════════╝\n"; 

//     do{
//         cout <<"\nSeleccione la opcion deseada para simular\n";
//         cout <<" 1 » El emisor se acerca al receptor\n 2 » el emisor se aleja del receptor\n 3 » el emisor y el receptor se mueven en la misma direccion\n 4 » el emisor y el receptor se mueven en sentido contrario\n";
//         cout << "Eleccion: ";
//         cin >> option;

//         if(option <1 or option > 4){
//             cout << "El dato ingresado no corresponde a ninguna de las opciones, intente de nuevo\n";
//         }

//     }while(option <1 or option > 4);

//     switch (option)
//     {
//     case 1:
//         cout << "╠Ingrese la frecuencia producida por la fuente (fs) en Hz: ";
//         cin >> fs;

//         cout <<"╠Ingrese la velocidad constante de la fuente en m/s: ";
//         cin >> vs;

//         fo = fs*((v)/(v-vs));

//         break;
//     case 2:
//         cout << "╠Ingrese la frecuencia producida por la fuente (fs) en Hz: ";
//         cin >> fs;

//         cout <<"╠Ingrese la velocidad constante de la fuente en m/s: ";
//         cin >> vs;

//         fo = fs*((v)/(v+vs));

//         break;

//     case 3:
//         cout << "╠Ingrese la frecuencia producida por la fuente (fs) en Hz: ";
//         cin >> fs;

//         cout <<"╠Ingrese la velocidad constante de la fuente en m/s: ";
//         cin >> vs;

//         cout <<"╠Ingrese la velocidad constante del receptor o observador en m/s: ";
//         cin >> vo;

//         fo = fs*((v+vo)/(v+vs));

//         break;
    
    
//     default:
//         cout << "╠Ingrese la frecuencia producida por la fuente (fs) en Hz: ";
//         cin >> fs;

//         cout <<"╠Ingrese la velocidad constante de la fuente en m/s: ";
//         cin >> vs;

//         cout <<"╠Ingrese la velocidad constante del receptor o observador en m/s: ";
//         cin >> vo;

//         fo = fs*((v-vo)/(v+vs));

//         break;
//     }

//     cout << "\n\nLa frecuencia notada por el observador o receptor (fo) es de: \n";
//     cout <<"┌───────────────────┐\n";
//     cout << "   " << fo << "Hz\n";
//     cout <<"└───────────────────┘";

//     return 0;
// }
// ` , `#include <iostream>

// using namespace std;

// int main()
// {
//     /* Declaracion de variables */
//     double m1 = 15,m2 = 10,mt,f = 55,a;


//     /* Inicio del programa */

//     cout << "╔══════════════════════════════════════════╗\n"; 
//     cout << "║ Simulacion leyes de newton con dos cajas ║\n"; 
//     cout << "╚══════════════════════════════════════════╝\n"; 

//     /* Pregunta #1 */
//     cout << "teniendo en cuenta dos cajas de 15(m1) y 10(m2) kg de masa respectivamente que se encuentran apoyadas sobre una superficie horizontal sin rozamiento, una apoyada en la otra. Si se empuja el conjunto con una fuerza de 55 N. \n";
//     cout <<"┌────────────────────────────────────────┐\n";
//     cout <<"│a. ¿Cual es la aceleracion de cada masa?│\n";
//     cout <<"└────────────────────────────────────────┘\n";

//     cout <<"» al estar unidas se comportan cinemáticamente como un solo cuerpo \n";
//     mt = m1 + m2;
//     cout << "Mtotal = " << m1 << "kg + " << m2 << "kg = " << mt << "kg\n";
//     a = f/mt;
//     cout << "a = " << f << "N / " << mt << "kg\n";
//     cout << "a = " << a << " m/s^2\n\n";

//     /* Pregunta #2 */
//     cout <<"┌────────────────────────────────────────────────┐\n";
//     cout <<"│b. ¿Qué fuerza ejercerá cada caja sobre la otra?│\n";
//     cout <<"└────────────────────────────────────────────────┘\n";

//     cout <<"» Si un cuerpo A ejerce una fuerza F sobre un cuerpo B, el cuerpo B reacciona ejerciendo la misma fuerza, pero en sentido contrario, sobre el cuerpo A \n";
//     cout << "╠  caja m1  ╣\n";
//     cout << f <<"N - F = m1 * a\n";
//     cout << f <<"N - F = " << m1 << "kg * " << a << "m/s^2\n";
//     cout << "F = " << f << "N - " << m1*a << "N\n";
//     cout << " F = " << f - (m1*a) << "N\n";
//     cout <<"└────────┘\n";

//     cout << "╠  caja m2  ╣\n";
//     cout << "F = m * a\n";
//     cout << "F = " << m2 << "kg * " << a << "m/s^2 \n";
//     cout << " F = " << m2 * a << "N\n";
//     cout <<"└────────┘\n";

//     return 0;
// }
// ` , `#include <iostream>

// using namespace std;

// int main()
// {
//     /*Declaracion de variables*/
//     int gen, actFis, edad;
//     double peso, altura, calBasal;

//     cout << "╔══════════════════════════════════════════════════╗\n"; 
//     cout << "║ Calculo de metabolismo basal por harris benedict ║\n"; 
//     cout << "╚══════════════════════════════════════════════════╝\n\n"; 

//     do{
//         cout << "Seleccione su genero: \n╠ 1 » Masculino\n╠ 2 » Femenino\n";
//         cout <<"Opcion: ";
//         cin >> gen;
//         if (gen != 1 and gen != 2){cout <<"Valor ingresado no valido, intente de nuevo \n";}
//     }while(gen != 1 and gen != 2);

//     cout << "\nIngrese su peso en kg: "; 
//     cin >> peso;

//     cout << "Ingrese su altura en cm: ";
//     cin >> altura;

//     cout << "Ingrese su edad en años: ";
//     cin >> edad;

//     do{
//         cout << "\nSeleccione su nivel de actividad fisica: \n╠ 1 » Poco o ningun ejercicio\n╠ 2 » Ejercicio ligero (1-3 dias x semana)\n╠ 3 » Ejercicio moderado (3-5 dias x semana)\n╠ 4 » Ejercicio Fuerte (6-7 dias x semana)\n╠ 5 » Ejercicio muy fuerte (2 veces x dia)\n";
//         cout <<"Opcion: ";
//         cin >> actFis;
//         if (actFis < 1 or actFis > 5){cout <<"Valor ingresado no valido, intente de nuevo \n";}
//     }while(actFis < 1 or actFis > 5);

    
//     if(gen == 1){calBasal = 66 + (13.7 * peso) + (5 * altura) - (6.8 * edad);}
//     else{calBasal = 655 + (9.6 * peso) + (1.85 * altura) - (4.7 + edad);}

//     switch (actFis)
//     {
//     case 1:
//         calBasal = calBasal * 1.2; 
//         break;

//     case 2:
//         calBasal = calBasal * 1.375; 
//         break;

//     case 3:
//         calBasal = calBasal * 1.55; 
//         break;

//     case 4:
//         calBasal = calBasal * 1.725; 
//         break;

//     default:
//         calBasal = calBasal * 1.9; 
//         break;
//     }

//     cout <<"┌────────────────────────────────────────────────┐"<<endl;
//     cout <<"│Su consumo diario de calorias recomendado es de: " << calBasal <<endl;
//     cout <<"└────────────────────────────────────────────────┘"<< endl;

//     return 0;
// }

// ` , `#include <iostream>

// using namespace std;

// int main()
// {
//     /* Declaracion de variables */
//     double peso, estatura, imc;
//     string com;

//     /* Inicio programa */

    
//     cout << "╔═══════════════════════════════════════════════════════════════╗\n"; 
//     cout << "║             Calculo indice de masa corporal (IMC)             ║\n"; 
//     cout << "╚═══════════════════════════════════════════════════════════════╝\n\n"; 

//     cout << "Ingrese su peso en kilogramos(kg): ";
//     cin >> peso;

//     cout <<"Ingrese su estatura en metros(m): ";
//     cin >> estatura; 

//     imc = peso/(estatura*estatura);

//     if(imc < 18.5)
//         com = "Bajo peso";
//     else if (imc <= 24.9 )
//         com = "Normal";
//     else if (imc <= 29.9 )
//         com = "Sobrepeso";
//     else if (imc <= 34.9 )
//         com = "Obesidad I";
//     else if (imc <= 39.9 )
//         com = "Obesidad II";
//     else if (imc <= 49.9 )
//         com = "Obesidad III";
//     else
//         com = "Obesidad IV";

//     cout <<"-----------------------------------------------------------------\n";
//     cout <<"┌────────────────────────┐      ┌───────────────────────────────┐\n";
//     cout <<"│  COMPOSICION CORPORAL  │      │ INDICE DE MASA CORPORAL (IMC) │\n";
//     cout <<"└────────────────────────┘      └───────────────────────────────┘\n";
//     cout <<"    ╔ Bajo peso        ═══════════════     Menos de 18.5 ╗\n";    
//     cout <<"    ╠ Normal           ═══════════════       18.5 - 24.9 ╣\n";    
//     cout <<"    ╠ Sobrepeso        ═══════════════         25 - 29.9 ╣\n";
//     cout <<"    ╠ Obesidad I       ═══════════════         30 - 34.9 ╣\n";
//     cout <<"    ╠ Obesidad II      ═══════════════         35 - 39.9 ╣\n";
//     cout <<"    ╠ Obesidad III     ═══════════════         40 - 49.9 ╣\n";
//     cout <<"    ╚ Obesidad IV      ═══════════════         Mas de 50 ╣\n";

//     cout <<"┌───────────────────────────────────────────────────────────────────┐\n";
//     cout <<"│ Su IMC es de: "<< imc << " Es decir su composicion corporal es "<< com <<"  \n";
//     cout <<"└───────────────────────────────────────────────────────────────────┘\n";

//     return 0;
// }
// ` , `#include <iostream>
// #include <cmath>

// using namespace std;

// int main()
// {
//     /* Declaracion de variables */
//     double peso, estatura, imc, pesoEmbarazo, ganancia1, ganancia23, pesoObtenido, pesoIdeal;
//     int semana;
//     string com, text;

//     /* Inicio programa */

    
//     cout << "╔═══════════════════════════════════════════════════════════════╗\n"; 
//     cout << "║Calculo variacion de peso de una mujer en gestacion con su imc ║\n"; 
//     cout << "╚═══════════════════════════════════════════════════════════════╝\n\n"; 

//     cout << "Ingrese su peso previo al embarazo en kilogramos(kg): ";
//     cin >> peso;

//     cout <<"Ingrese su estatura en metros(m): ";
//     cin >> estatura; 

//     cout <<"Ingrese su peso actual en kilogramos (kg): ";
//     cin >> pesoEmbarazo;

//     cout <<"Ingrese la semana de embarazo en la que se encuentra: ";
//     cin >> semana;

//     imc = peso/(estatura*estatura);

//     if(imc < 18.5){
//         com = "Bajo peso";
//         ganancia1 = 0.2;
//         ganancia23 = 0.55;
//     }

//     else if (imc <= 24.9 ){
//         com = "Normal";
//         ganancia1 = 0.28;
//         ganancia23 = 0.5;
//     }

//     else if (imc <= 29.9 ){
//         com = "Sobrepeso";
//         ganancia1 = 0.14;
//         ganancia23 = 0.3;
//     }

//     else if (imc <= 34.9 ){
//         com = "Obesidad I";
//         ganancia1 = 0.1;
//         ganancia23 = 0.25;
//     }

//     else if (imc <= 39.9 ){
//         com = "Obesidad II";
//         ganancia1 = 0.1;
//         ganancia23 = 0.25;
//     }

//     else if (imc <= 49.9 ){
//         com = "Obesidad III";
//         ganancia1 = 0.1;
//         ganancia23 = 0.25;
//     }

//     else{
//         com = "Obesidad IV";
//         ganancia1 = 0.1;
//         ganancia23 = 0.25;
//     }

//     cout <<"-----------------------------------------------------------------\n";
//     cout <<"┌────────────────────────┐      ┌───────────────────────────────┐\n";
//     cout <<"│  COMPOSICION CORPORAL  │      │ INDICE DE MASA CORPORAL (IMC) │\n";
//     cout <<"└────────────────────────┘      └───────────────────────────────┘\n";
//     cout <<"    ╔ Bajo peso        ═══════════════     Menos de 18.5 ╗\n";    
//     cout <<"    ╠ Normal           ═══════════════       18.5 - 24.9 ╣\n";    
//     cout <<"    ╠ Sobrepeso        ═══════════════         25 - 29.9 ╣\n";
//     cout <<"    ╠ Obesidad I       ═══════════════         30 - 34.9 ╣\n";
//     cout <<"    ╠ Obesidad II      ═══════════════         35 - 39.9 ╣\n";
//     cout <<"    ╠ Obesidad III     ═══════════════         40 - 49.9 ╣\n";
//     cout <<"    ╚ Obesidad IV      ═══════════════         Mas de 50 ╝\n";

//     cout <<"┌───────────────────────────────────────────────────────────────────┐\n";
//     cout <<"│ Su IMC es de: "<< imc << " Es decir su composicion corporal es "<< com <<"\n";
//     cout <<"└───────────────────────────────────────────────────────────────────┘\n";

//     cout <<"\n-----------------------------------------------------------------\n";

//     cout <<"\n-----------------------------------------------------------------\n";
//     cout <<"┌──────────────────────┐  ┌─────────────────────────────────────────┐\n";
//     cout <<"│  IMC pregestacional  │  │    Indice ganancia de peso x semana     │\n";
//     cout <<"│                      │  │   1 trimestre        2 y 3 trimestre    │\n";
//     cout <<"└──────────────────────┘  └─────────────────────────────────────────┘\n";
//     cout <<"  ╔ Bajo peso   ══════════      200 gr    ═══════     550 gr     ╗\n";    
//     cout <<"  ╠ Normal      ══════════      180 gr    ═══════     500 gr     ╣\n";    
//     cout <<"  ╠ Sobrepeso   ══════════      140 gr    ═══════     300 gr     ╣\n";
//     cout <<"  ╚ Obesidad    ══════════      100 gr    ═══════     250 gr     ╝\n";

//     if(semana > 12){
//         pesoObtenido = (ganancia1 * 12) + (ganancia23*(semana-12));

//     }else{
//         pesoObtenido = semana * ganancia1;
//     }
//     pesoIdeal = pesoObtenido + peso;

//     if(pesoIdeal < pesoEmbarazo){
//         text = "│ eso significa que su peso actual esta " + to_string(pesoEmbarazo - pesoIdeal) + "kg por encima de lo recomendado" ;
//     }else if(pesoIdeal > pesoEmbarazo){
//         text = "│ eso significa que su peso actual esta " + to_string(pesoIdeal - pesoEmbarazo) + "kg por debajo de lo recomendado" ;
//     }else{
//         text = "│ eso significa que su peso actual esta exactamente en lo recomendado" ;
//     }
    

//     cout <<"┌───────────────────────────────────────────────────────────────────┐\n";
//     cout <<"│ En las "<< semana <<" semanas de gestacion deveria haber aumentado:  " << pesoObtenido <<"kg \n";
//     cout <<"│ por lo que su peso actual deveria ser de: "<< pesoIdeal <<"kg\n";
//     cout << text << "\n";
//     cout <<"└───────────────────────────────────────────────────────────────────┘\n";

//     return 0;
// }
// `]
// const parcial1 = document.getElementById("parcial1")
// const titleParcial1 = document.getElementById("titleParcial1")


// //PARCIAL 2
// const enunciadosParcial2 = [
//"Escribe un programa en C++ que solicite al usuario ingresar el número de ventas realizadas en una tienda durante una semana. Luego, utiliza un ciclo for para calcular la suma total de las ventas", "Crea un programa en C++ que solicite al usuario ingresar un número y utilice un ciclo for para mostrar la tabla de multiplicar de ese número del 1 al 10.", "Desarrolla un programa en C++ que pida al usuario ingresar cinco calificaciones y luego utilice un ciclo for para calcular y mostrar el promedio de las calificaciones.", "Escribe un programa en C++ que solicite al usuario ingresar un número entero positivo y utilice un ciclo for para calcular y mostrar su factorial.", "Crea un programa en C++ que genere una serie de números del 1 al 100 y utilice un ciclo for para encontrar y mostrar todos los números pares en esa serie.", "Desarrolla un programa en C++ que solicite al usuario ingresar una base y un exponente. Utiliza un ciclo for para calcular y mostrar el resultado de elevar la base al exponente.", "Inversión de cadena: Escribe un programa en C++ que pida al usuario ingresar una cadena de texto y luego utilice un ciclo for para mostrar la cadena en orden inverso.", "Conteo de vocales: Crea un programa en C++ que solicite al usuario ingresar una frase y utilice un ciclo for para contar y mostrar cuántas vocales (a, e, i, o, u) hay en la frase.", "Generación de números primos: Desarrolla un programa en C++ que genere y muestre los primeros 10 números primos utilizando un ciclo for", "Cálculo de interés compuesto: Escribe un programa en C++ que calcule y muestre el saldo final de una inversión inicial de $1000 con un interés compuesto del 5% anual durante 5 años, utilizando un ciclo for", "Juego de adivinanza: Crea un programa en C++ que genere un número aleatorio entre 1 y 100. Luego, permite al usuario adivinar el número utilizando un ciclo while. El programa debe dar pistas de si el número es mayor o menor que el ingresado por el usuario.", "Calculadora de división: Desarrolla un programa en C++ que solicite al usuario ingresar dos números y utilice un ciclo while para realizar la división del primero entre el segundo, mostrando el resultado. El ciclo debe continuar hasta que el usuario ingrese 0 como divisor.", "Secuencia de Fibonacci: Escribe un programa en C++ que genere y muestre los primeros 10 números de la secuencia de Fibonacci utilizando un ciclo while.", "Simulación de cuenta regresiva: Crea un programa en C++ que solicite al usuario ingresar un número y luego utilice un ciclo while para mostrar una cuenta regresiva desde ese número hasta 1.", "Conteo de dígitos: Desarrolla un programa en C++ que solicite al usuario ingresar un número entero positivo y utilice un ciclo while para contar y mostrar la cantidad de dígitos en ese número.", "16.	Validación de contraseña: Escribe un programa en C++ que solicite al usuario ingresar una contraseña. Utiliza un ciclo while para repetir la solicitud hasta que el usuario ingrese la contraseña correcta (por ejemplo, secreto).", "Suma de números positivos: Crea un programa en C++ que permita al usuario ingresar una serie de números positivos. Utiliza un ciclo while para calcular y mostrar la suma de esos números. La entrada debe detenerse cuando el usuario ingrese un número negativo.", "Juego de ahorcado: Desarrolla un programa en C++ que implemente el juego de ahorcado. El programa debe seleccionar una palabra aleatoria de una lista y permitir al usuario adivinar letras hasta adivinar la palabra o agotar los intentos, utilizando un ciclo while.", "19.	Conteo de números pares e impares: Crea un programa en C++ que permita al usuario ingresar una serie de números. Utiliza un ciclo while para contar y mostrar cuántos números pares y cuántos números impares ha ingresado el usuario. La entrada debe detenerse cuando el usuario ingrese 0.", "20.	Calculadora de descuento: Escribe un programa en C++ que solicite al usuario ingresar el precio original de un producto y un porcentaje de descuento. Utiliza un ciclo while para calcular y mostrar el precio con descuento. La entrada debe detenerse cuando el usuario ingrese un precio negativo como señal de finalización."
// ]

// const codigoParcial2 = [`#include <iostream>
// using namespace std;

// int main() {
//   // Declaracion de variables
//   int cant;
//   double total = 0, prov;

//   cout << "  ╔═══════════════════════════════════╗" << endl;
//   cout << "  ║        Tienda el milagrito        ║" << endl;
//   cout << "  ╠═══════════════════════════════════╣" << endl;
//   cout << "  ║    Ingrese el numero de ventas    ║" << endl;
//   cout << "  ║    realizado durante la semana    ║" << endl;
//   cout << "  ╠═══════════════════════════════════╝" << endl;
//   cout << "  ╠    cantidad: ";

//   cin >> cant;

//   for (int i = 1; i <= cant; i++) {
//     cout << "  ╠ Ingrese el valor de la venta " << i << ": ";
//     cin >> prov;
//     total += prov;
//   }

//   cout << "  ╚═══════════════════════════════════╝\n" << endl;
//   cout << "  Para un total de " << cant << " ventas esta semana se han recaudado: $" << total <<endl;

// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int n;

//   cout << "Ingrese la tabla que desea conocer: ";
//   cin >> n;

//   cout << "\n";


//   cout << "───────────────────────────────────\n";
//   cout << "    Tabla de multiplicar del "<< n <<"\n";
//   cout << "───────────────────────────────────\n";

//   for (int i = 1; i <= 10; i++) {
//     if (i < 10){
//       if(i*n < 10){
//         cout << "  |  " << n << "  | x |  "<< i <<"  |  " << n * i << "        |\n";
//       }else if(i*n < 100){
//         cout << "  |  " << n << "  | x |  "<< i <<"  |  " << n * i << "       |\n";
//       }else{
//         cout << "  |  " << n << "  | x |  "<< i <<"  |  " << n * i << "      |\n";
//       }
//     }
//     else{
//       if(i*n < 10){
//         cout << "  |  " << n << "  | x |  "<< i <<"   |  " << n * i << "        |\n";
//       }else if(i*n < 100){
//         cout << "  |  " << n << "  | x |  "<< i <<" |  " << n * i << "       |\n";
//       }else{
//         cout << "  |  " << n << "  | x |  "<< i <<"  |  " << n * i << "     |\n";
//       }
//     }  
//   }

//   cout << "───────────────────────────────────";

//   return 0;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   // Declaracion de variables
//   double total = 0, nota;

//   cout << "  ╔════════════════════════════════════════╗" << endl;
//   cout << "  ║            Calculo promedio            ║" << endl;
//   cout << "  ╠════════════════════════════════════════╝" << endl;

//   for (int i  = 1; i <= 5 ; i++){
//     cout << "  ╠Ingrese la nota " << i << ": ";
//     cin >> nota;
//     total += nota;
//   }

//   cout << "  ╠═════════════════════════════════════════" << endl;
//   cout << "  ║  El promedio es de: " << total/5 << endl;
//   cout << "  ╚═════════════════════════════════════════" << endl;


// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   // Declaracion de variables
//   int numero;
//   double total = 1;

//   cout << "  ╔════════════════════════════════════╗" << endl;
//   cout << "  ║      CALCULO NUMERO FACTORIAL      ║" << endl;
//   cout << "  ╠════════════════════════════════════╣" << endl;
//   cout << "  ║  A continuacion ingrese el numero  ║" << endl;
//   cout << "  ║        el cual desea operar        ║" << endl;
//   cout << "  ╠════════════════════════════════════╝" << endl;
//   cout << "  ╠    Numero: ";

//   cin >> numero;

//   for (int i = 1; i <= numero; i++){
//     total = total * i;
//   }

//   cout << "  ╠═══════════════════════════════════╣" << endl;
//   cout << "  ║  El factorial de " << numero << " es: "<< total << endl;
//   cout << "  ╚═══════════════════════════════════╝" << endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   // Declaracion de variables
  
//   int contador = 0;
  
//   cout << " ╔════════════════════════════════════════════════════════════════════════════╗" << endl;
//   cout << " ║                         BUSQUEDA DE NUMEROS PARES                          ║" << endl;
//   cout << " ╠════════════════════════════════════════════════════════════════════════════╣" << endl;
//   cout << " ║                     A continuacion vera una secuencia                      ║" << endl;
//   cout << " ║                        de los numeros del 1 al 100                         ║" << endl;
//   cout << " ╠════════════════════════════════════════════════════════════════════════════╣" << endl;

//   for (int  i = 1; i <= 100; i++){
//     if(i < 10){
//       cout << " ║ "<< i << "  ║ ";
//     }
//     else if(i < 100){
//       cout << " ║ "<< i << " ║ ";
//     }
//     else{
//       cout << " ║ "<< i << "║ ";
//     }

//     contador ++;
//     if (contador == 10){
//       contador = 0;
//       cout << endl;
//     }
//   }

//   cout << " ╠════════════════════════════════════════════════════════════════════════════╣" << endl;
//   cout << " ║                   A continuacion vera los numeros pares                    ║" << endl;
//   cout << " ║                          de la secuancia anterior                          ║" << endl;
//   cout << " ╠════════════════════════════════════════════════════════════════════════════╣" <<endl; 

//   for (int  i = 2; i <= 100; i = i+2){
//     if(i < 10){
//       cout << " ║ "<< i << "  ║ ";
//     }
//     else if(i < 100){
//       cout << " ║ "<< i << " ║ ";
//     }
//     else{
//       cout << " ║ "<< i << "║ ";
//     }

//     contador ++;
//     if (contador == 10){
//       contador = 0;
//       cout << endl;
//     }
//   }
//   cout << " ╚════════════════════════════════════════════════════════════════════════════╝" <<endl; 
  
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   // Declaracion de variables
//   double base, exponente, total = 1;

//   cout << "  ╔════════════════════════════════════╗" << endl;
//   cout << "  ║      CALCULADORA DE POTENCIAS      ║" << endl;
//   cout << "  ╠════════════════════════════════════╣" << endl;
//   cout << "  ║   A continuacion ingrese la base   ║" << endl;
//   cout << "  ║       y el exponente a operar      ║" << endl;
//   cout << "  ╠════════════════════════════════════╝" << endl;
//   cout << "  ╠    Base: ";

//   cin >> base;

//   cout << "  ╠    Exponente: ";

//   cin >> exponente;

//   for (int i = 0; i < exponente; i++){
//     total = total * base;
//   }

//   cout << "  ╠════════════════════════════════════╣" << endl;
//   cout << "  ║  la potencia de " << base << "^"<< exponente << " es de: " << total <<  endl;
//   cout << "  ╚════════════════════════════════════╝" << endl;
// }
// `, `#include <iostream>
// #include <string>

// using namespace std;

// int main() {
//   // Declaracion de variables
//   string cadena;
//   double total = 1;

//   cout << "╔════════════════════════════════════╗" << endl;
//   cout << "║         INVERSION DE CADENA        ║" << endl;
//   cout << "╠════════════════════════════════════╣" << endl;
//   cout << "║    Ingrese la cadena a invertir    ║" << endl;
//   cout << "╠    Cadena: ";

//   cin >> cadena;

//   cout << "╠════════════════════════════════════╣" << endl;
//   cout << "║  Cadena invertida: ";

//   for(int i = (cadena.size()-1); i >= 0; i--){
//     cout <<  cadena[i];
//   }

//   cout << endl;
//   cout << "╚════════════════════════════════════╝" << endl;

// }
// `, `#include <iostream>
// #include <string>
// #include <cctype>

// using namespace std;

// int main() {
//   // Declaracion de variables
//   int a=0, e=0, i=0, o=0, u=0;
//   string frase;

//   cout << "╔══════════════════════════════════╗" << endl;
//   cout << "║         CONTEO DE VOCALES        ║" << endl;
//   cout << "╠══════════════════════════════════╣" << endl;
//   cout << "║     Ingrese la frase a contar    ║" << endl;
//   cout << "║ ";
  
//   cin >> frase;
  
//   for (int j = 0; j < frase.size(); j++) {
//     frase[j] = tolower(frase[j]);
//   }
  
//   for(int j = 0; j < frase.size(); j++){
//     switch (frase[j]) {
      
//       case 'a':
//         a++;
//         break;
      
//       case 'e':
//         e++;
//         break;
      
//       case 'i':
//         i++;
//         break;
      
//       case 'o':
//         o++;
//         break;
      
//       case 'u':
//         u++;
//         break;
      
//       default:
//         break; // Ignorar otros caracteres
//     }
//   }

//   cout << "╠══════════════════════════════════╣" << endl;
//   cout << "║  Numero de 'a': " << a <<  endl;
//   cout << "║  Numero de 'e': " << e <<  endl;
//   cout << "║  Numero de 'i': " << i <<  endl;
//   cout << "║  Numero de 'o': " << o <<  endl;
//   cout << "║  Numero de 'u': " << u <<  endl;
//   cout << "║  Numero total de vocales: " << a+e+i+o+u <<  endl;
//   cout << "╚══════════════════════════════════╝" << endl;

// }
// `, `#include <iostream>

// using namespace std;

// int main() {
//   // Declaracion de variable
//   int contador = 0;
//   int aux = 0;

//   cout << "╔═════════════════════════════════════════════╗" << endl;
//   cout << "║                NUMEROS PRIMOS               ║" << endl;
//   cout << "╠═════════════════════════════════════════════╣" << endl;
//   cout << "║        A continuacion habra una lista       ║" << endl;
//   cout << "║      de los primeros 10 numeros primos      ║" << endl;
//   cout << "╠═════════════════════════════════════════════╣" << endl;
//   cout << "║ ";
//   for (int i = 1; contador < 10 ; i++){
//     aux = 0;
//     for (int j = 1; j <= i ; j++){
//       if (i % j == 0){
//         aux ++;
//       }
//     }

//     if (aux == 2){
//       cout << i << " ║ ";
//       contador++;
//     }
//   }
//   cout << endl;
//   cout << "╚═════════════════════════════════════════════╝" << endl;
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   double inversion = 1000;
  
//   cout << "╔═════════════════════════════════════════════╗" << endl;
//   cout << "║           CALCULO INTERES COMPUESTO         ║" << endl;
//   cout << "╠═════════════════════════════════════════════╣" << endl;
//   cout << "║ Inversion inicial de $1000 con un interes   ║" << endl;
//   cout << "║          del 5% años durante 5 años         ║" << endl;
//   cout << "╠═════════════════════════════════════════════╣" << endl;
//   cout << "║  Total final:                               ║" << endl;
//   cout << "║  ";

//   for(int i = 0; i < 5; i++){
//     inversion += (inversion*0.05);
//   }
//   cout << "$" << inversion << endl;
  
//   cout << "╚═════════════════════════════════════════════╝" << endl;


// }
// `, `#include <iostream>
// #include <cstdlib> // Necesario para rand() y srand()
// #include <ctime>   // Necesario para time()

// using namespace std;

// int main() {

//   int num = 0, aleatorio;

//   srand(static_cast<unsigned>(time(nullptr)));//Se usa para que el rand cambie en funcion del tiempo, asi no siempre saldra el mismo numero

//   aleatorio = 1 + rand() % (100 - 1); //variable = limite_inferior + rand() % (limite_superior +1 - limite_inferior) ;

//   cout << "╔════════════════════════════════════════╗" << endl;
//   cout << "║           DESCUBRE EL NUMERO           ║" << endl;
//   cout << "╠════════════════════════════════════════╣" << endl;
//   cout << "║ Ingresa numeros y el programa te dira  ║" << endl;
//   cout << "║          si es menor o mayor           ║" << endl;
//   cout << "╠════════════════════════════════════════╝" << endl;
//   cout << "║    Numero: ";

//   while(num != aleatorio){
//     cin >> num;
//     if (num < aleatorio){
//       cout << "╠  El numero aleatorio es MAYOR" << endl;
//       cout << "║    Numero: ";
//     }
//     else if (num > aleatorio){
//       cout << "╠  El numero aleatorio es MENOR" << endl;
//       cout << "║    Numero: ";
//     }
//     else{
//       cout << "╚════════════════════════════════════════╝" << endl;
//       cout << endl;
//       cout << "╔════════════════════════════════════════╗" << endl;
//       cout << "║                GANASTE!!               ║" << endl;
//       cout << "╚════════════════════════════════════════╝" << endl;
//     }
//   }




//   return 0;
// }
// `, `#include <iostream>

// using namespace std;

// int main() {
//   double dividendo, divisor = 1;
  
//   cout << "╔════════════════════════════════════════╗" << endl;
//   cout << "║          CALCULADORA DIVISION          ║" << endl;
//   cout << "╚════════════════════════════════════════╝" << endl;

//   while (divisor != 0){
//     cout << "╔════════════════════════════════════════╗" << endl;
//     cout << "║         ingrese los dos numeros        ║" << endl;
//     cout << "║            que desea operar            ║" << endl;
//     cout << "║  coloque 0 en el divisor para salir    ║" << endl;
//     cout << "╠════════════════════════════════════════╣" << endl;
    
//     cout << "║   Dividendo:  ";
//     cin >> dividendo;
//     cout << "║   Divisor:  ";
//     cin >> divisor;

//     if (divisor != 0){
//       cout << "╠════════════════════════════════════════╣" << endl;
//       cout << "║   Resultado:  " << dividendo / divisor << endl;
//       cout << "╚════════════════════════════════════════╝" << endl;
//     }
//     else{
//       cout << "╚════════════════════════════════════════╝" << endl;
//     }

//   }

// }
// `, `#include <iostream>

// using namespace std;

// int main() {
//   int contador = 0;

//   cout << " ╔══════════════════════════════════════════╗" << endl;
//   cout << " ║            SECUENCIA FIBONACCI           ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║  A continuacion los primeros 10 digitos  ║" << endl;
//   cout << " ║         de la secuencia fibonacci        ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;

//   int a = 0, b = 1, c;

//   while (contador < 10) {
//     if (contador == 9){
//       cout << " ║ "<<  a << " ║ " << endl;
//     }
//     else{
//       cout << " ║ "<<  a ;
//     }
//     c = a + b;
//     a = b;
//     b = c;
//     contador++;
//   }
//   cout << " ╚══════════════════════════════════════════╝" << endl;

//   return 0;
// }
// `, `#include <chrono>
// #include <iostream>
// #include <thread>

// using namespace std;

// int main() {
//   int n;

//   cout << " ╔══════════════════════════════════════════╗" << endl;
//   cout << " ║             CUENTA REGRESIVA             ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║  Ingrese el numero desde el cual quiere  ║" << endl;
//   cout << " ║  iniciar la cuenta regresiva: ";
  
//   cin >> n;
  
//   cout << " ╠══════════════════════════════════════════╝" << endl;


  
//   for (int i = n; i >= 0; i--) {
//     cout << " ║ " << i << endl;
//     this_thread::sleep_for(chrono::seconds(1)); // Pausa durante 1 segundo
//   }

//   cout << "*despega*";
// }
// `, `#include <iostream>

// using namespace std;

// int main() {
//   int num, contador = 0;
  
//   cout << " ╔══════════════════════════════════════════╗" << endl;
//   cout << " ║              CONTEO DIGITOS              ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║    Ingrese el entero positivo del cual   ║" << endl;
//   cout << " ║   desea conocer la cantidad de digitos   ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║   Numero:  ";
  
//   cin >> num;

//   while (num != 0){
//     num /= 10;
//     contador++;
//   }
  
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║   Cantidad de digitos :  " << contador << endl;
//   cout << " ╚══════════════════════════════════════════╝" << endl;
  
  
// `, `#include <iostream>

// using namespace std;

// int main() {
//   string password = "";

//   cout << " ╔══════════════════════════════════════════╗" << endl;
//   cout << " ║              INICIAR SESION              ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║  Usuario: Santi02005@hotmail.com         ║" << endl;
//   cout << " ║  Contraseña:  ";

//   cin >> password;
//   cout << " ╚══════════════════════════════════════════╝" << endl;

//   while (password != "secreto"){
//     cout << " ╔══════════════════════════════════════════╗" << endl;
//     cout << " ║           CONTRASEÑA INCORRECTA          ║" << endl;
//     cout << " ╠══════════════════════════════════════════╣" << endl;
//     cout << " ║            Intente de nuevo              ║" << endl;
//     cout << " ║  Contraseña:  ";
//     cin >> password;
//     cout << " ╚══════════════════════════════════════════╝" << endl;
    
    
//   }

// }
// `, `#include <iostream>

// using namespace std;

// int main() {

//   double total = 0, n = 1;

//   cout << " ╔══════════════════════════════════════════╗" << endl;
//   cout << " ║           SUMA NUMEROS POSITIVOS         ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;
//   cout << " ║  Ingrese numeros positivos, cuando desee ║" << endl;
//   cout << " ║   finalizar, ingrese un numero negativo  ║" << endl;
//   cout << " ╠══════════════════════════════════════════╣" << endl;

//   while (n > 0){
//     cout << " ║ ";
//     total += n;
//     cin >> n;
//   }
//   total -=1;

//   cout << " ╠══════════════════════════════════════════╗" << endl;
//   cout << " ║ Total suma: " << total << endl;
//   cout << " ╚══════════════════════════════════════════╝" << endl;


//   return 0;
// }
// `, `#include <iostream>
// #include <string>
// #include <cstdlib>
// #include <ctime>

// using namespace std;

// int main() {

//   char letra;
//   bool juegoTerminado = false, acierto;
//   int aleatorio, cantVidas = 6;

//   string lista[5] = {"programacion", "computadora", "teclado", "javascript", "python"};

//   srand(static_cast<unsigned>(time(nullptr)));
//   aleatorio = 0 + rand() % (4+1 - 0);

//   string palabra = lista[aleatorio];
//   cout << palabra << endl;
  
//   cout << " ╔══════════════════════════════════════════════╗" << endl;
//   cout << " ║                JUEGO AHORCADO                ║" << endl;
//   cout << " ╠══════════════════════════════════════════════╣" << endl;
//   cout << " ║   Se eligira una palabra al azar y tendra 6  ║" << endl;
//   cout << " ║           intentos para equivocarse          ║" << endl;
//   cout << " ╠══════════════════════════════════════════════╣" << endl;

//   while (juegoTerminado == false){
//     cout << " ║ Ingrese la letra: ";
//     cin >> letra;
//     acierto = false;
    
//     for (int i = 0; i < palabra.length(); i++){
//       if (letra == palabra[i]){
//         palabra.erase(i,1);
//         acierto = true; 
//       }
      
//     }//end for
//     if (acierto == true){
//       cout << " ║  Acertaste!!  " << endl;
//     }else{
//       cout << " ║  No acertaste!!  " << endl;
//       cantVidas--; 
//     }
    
//     if(palabra == ""){
//       cout << " ╚══════════════════════════════════════════════╝" << endl;
//       cout << endl;
//       cout << "  ╔══════════════════════════════════════════════╗" << endl;
//       cout << "  ║                    GANASTE!!                 ║" << endl;
//       cout << "  ╚══════════════════════════════════════════════╝" << endl;

//       juegoTerminado = true;
//     }

//     if(cantVidas == 0){
//       cout << " ╚══════════════════════════════════════════════╝" << endl;
//       cout << endl;
//       cout << "  ╔══════════════════════════════════════════════╗" << endl;
//       cout << "  ║                    PERDISTE                  ║" << endl;
//       cout << "  ╚══════════════════════════════════════════════╝" << endl;

//       juegoTerminado = true;
//     }
    
//   } // end while
// }
// `, `#include <iostream>
// using namespace std;

// int main() {
//   int pares = 0, impares = 0;
//   int numero = 1;
  
//   cout << "╔══════════════════════════════════════════╗" << endl;
//   cout << "║           CONTEO PARES  IMPARES          ║" << endl;
//   cout << "╠══════════════════════════════════════════╣" << endl;
//   cout << "║ Ingrese los numeros que quiera analizar  ║" << endl;
//   cout << "║         para finalizar ingrese 0         ║" << endl;
//   cout << "╠══════════════════════════════════════════╝" << endl;
//   cout << "║ ";
//   cin >> numero;
//   while (numero != 0){
//     if (numero % 2 == 0){
//       pares++;
//     }
//     else{
//       impares++;
//     }
//     cout << "║ ";
//     cin >> numero;
//   }

//   cout << "╚══════════════════════════════════════════╝" << endl;
//   cout << endl;
//   cout << "╔══════════════════════════════════════════╗" << endl;
//   cout << "║  Cantidad pares: "<< pares << endl;
//   cout << "║  Cantidad impares: "<< impares << endl;
//   cout << "╚══════════════════════════════════════════╝" << endl;
  
// }
// `, `#include <iostream>

// using namespace std;

// int main() {
//   double descuento, precio = 1;
  
//   cout << "╔════════════════════════════════════════╗" << endl;
//   cout << "║         CALCULADORA DESCUENTOS         ║" << endl;
//   cout << "╚════════════════════════════════════════╝" << endl;

//   while (precio != 0){
//     cout << "╔════════════════════════════════════════╗" << endl;
//     cout << "║         ingrese el precio y el %       ║" << endl;
//     cout << "║              de descuento              ║" << endl;
//     cout << "║   coloque 0 en el precio para salir    ║" << endl;
//     cout << "╠════════════════════════════════════════╣" << endl;
    
//     cout << "║   Precio:  ";
//     cin >> precio;

//     if (precio != 0){
//       cout << "║   Descuento:  ";
//       cin >> descuento;
//       cout << "╠════════════════════════════════════════╣" << endl;
//       cout << "║   Resultado:  " << precio - (precio * (descuento/100)) << endl;
//       cout << "╚════════════════════════════════════════╝" << endl;
//     }
//     else{
//       cout << "╚════════════════════════════════════════╝" << endl;
//     }

//   }
// }
// `,]
// const parcial2 = document.getElementById("parcial2")
// const titleParcial2 = document.getElementById("titleParcial2")





//Funcion que imprime tanto los titulos en la sidebar como el codigo en la pagina
function printExersices(enunciado, codigo, corte, details) {

  //Iteramos el array para imprimir la cantidad de ejercicios en el sidebar
  let strHtml = ``
  for (let i = 0; i < enunciado.length; i++) {
    strHtml += `
        <li value="${i}">Ejercicio ${i + 1}</li>
        `
  }
  corte.innerHTML = strHtml

  //Al hacer click en algun li(algun ejercicio) toma del array toma la posicion y extrae de los arrays el enunciado y el codigo
  corte.addEventListener("click", function (event) {
    if (event.target.tagName === "LI") {
      let clicked = event.target.value;
      document.getElementById("code").style.display = "block"
      document.getElementById("principal_title").textContent = "Repositorio Estructura de datos"


      document.getElementById("title").innerHTML = `Actividad ${clicked + 1}`; //insertamos el numero del ejercicio
      document.getElementById("enunciado").innerHTML = enunciado[clicked];    // insertamos su enunciado
      document.getElementById("details").innerHTML = details[clicked]  //Dejamos en blanco los detalles
      document.getElementById("code").textContent = (codigo[clicked]);  //insertamos el codigo
      document.getElementById("copyButton_div").innerHTML = `<button id="copyButton" class="raise">Copiar codigo</button>`
    }

    document.getElementById("copyButton").addEventListener("click", (event) => {
      let codigoCopiar = document.getElementById("code")
      let range = document.createRange()
      range.selectNode(codigoCopiar)
      window.getSelection().removeAllRanges();
      window.getSelection().addRange(range);
      document.execCommand("copy");
      window.getSelection().removeAllRanges();
    })

  });
}

function validateTitle(titleP1) {
  //Desplegamos el titulo del corte, que al hacer click se desplieguen los ejercicios
  titleP1.addEventListener('click', function () {
    if (corte1.style.display === 'none' || corte1.style.display === '') {
      corte1.style.display = 'block';
      // titleP2.style.display = "none"
      // titleP3.style.display = "none"
      //document.getElementById("parciales").style.display = "none"
      titleP1.textContent = "Volver"
    } else {
      corte1.style.display = 'none';
      // titleP2.style.display = "block"
      // titleP3.style.display = "block"
      //document.getElementById("parciales").style.display = "block"
      titleP1.textContent = "Corte 1"
    }
  });

  // titleP2.addEventListener('click', function () {
  //   if (corte2.style.display === 'none' || corte2.style.display === '') {
  //     corte2.style.display = 'block';
  //     titleP1.style.display = "none"
  //     titleP3.style.display = "none"
  //     document.getElementById("parciales").style.display = "none"
  //     titleP2.textContent = "Volver"
  //   } else {
  //     corte2.style.display = 'none';
  //     titleP1.style.display = "block"
  //     titleP3.style.display = "block"
  //     document.getElementById("parciales").style.display = "block"
  //     titleP2.textContent = "Corte 2"
  //   }
  // })

  // titleP3.addEventListener('click', function () {
  //   if (corte3.style.display === 'none' || corte3.style.display === '') {
  //     corte3.style.display = 'block';
  //     titleP1.style.display = "none"
  //     titleP2.style.display = "none"
  //     titleP3.textContent = "Volver"
  //     document.getElementById("parciales").style.display = "none"
  //   } else {
  //     corte3.style.display = 'none';
  //     titleP1.style.display = "block"
  //     titleP2.style.display = "block"
  //     titleP3.textContent = "Corte 3"
  //     document.getElementById("parciales").style.display = "block"
  //   }
  // })

  // titleParcial1.addEventListener('click', function () {
  //   if (parcial1.style.display === 'none' || parcial1.style.display === '') {
  //     parcial1.style.display = 'block';
  //     titleParcial2.style.display = "none"
  //     titleParcial1.textContent = "Volver"
  //     document.getElementById("ejercicios").style.display = "none"
  //     document.getElementById("paginasParcial").style.display = "none"
  //     document.getElementById("code").style.height = "34vh"
  //   } else {
  //     document.getElementById("code").style.height = "80%"
  //     titleParcial2.style.display = "block"
  //     parcial1.style.display = 'none';
  //     titleParcial1.textContent = "Parcial 1"
  //     document.getElementById("ejercicios").style.display = "block"
  //     document.getElementById("paginasParcial").style.display = "block"
  //   }
  // })

  // titleParcial2.addEventListener('click', function () {
  //   if (parcial2.style.display === 'none' || parcial2.style.display === '') {
  //     titleParcial1.style.display = "none"
  //     parcial2.style.display = 'block';
  //     titleParcial2.textContent = "Volver"
  //     document.getElementById("ejercicios").style.display = "none"
  //     document.getElementById("paginasParcial").style.display = "none"
  //   } else {
  //     titleParcial1.style.display = "block"
  //     parcial2.style.display = 'none';
  //     titleParcial2.textContent = "Parcial 2"
  //     document.getElementById("ejercicios").style.display = "block"
  //     document.getElementById("paginasParcial").style.display = "block"

  //   }
  // })

}
//Impresion corte1
printExersices(enunciadosP1, codigoP1, corte1, detailsVacio)

// //Impresion corte 2
// printExersices(enunciadosP2, codigoP2, corte2, detailsVacio)

// //Impresion corte 3
// printExersices(enunciadosP3, codigoP3, corte3, detailsVacio)

// //Impresion parcial 1
// printExersices(enunciadosParcial1, codigoParcial1, parcial1, detailsParcial1)

// //Impresion parcial 2
// printExersices(enunciadosParcial2, codigoParcial2, parcial2, detailsVacio)




//desplegar y esconder listas de ejercicios

// validateTitle(titleP1, titleP2, titleP3, titleParcial1, titleParcial2, corte1, corte2, corte3, parcial1, parcial2)
validateTitle(titleP1)
